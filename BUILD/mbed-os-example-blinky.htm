<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\BUILD\mbed-os-example-blinky.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\BUILD\mbed-os-example-blinky.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Wed Oct 27 18:06:41 2021
<BR><P>
<H3>Maximum Stack Usage =        960 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
default_idle_hook() &rArr; mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*) &rArr; mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[129]">mbed_assert_internal</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">mbed_error</a><BR>
 <LI><a href="#[e7]">trap_rtx_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">mbed_error</a><BR>
 <LI><a href="#[1e0]">osRtxErrorNotify</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">mbed_error</a><BR>
 <LI><a href="#[12c]">error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20f]">mbed_halt_system</a><BR>
 <LI><a href="#[225]">initialize</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">mbed_error</a><BR>
 <LI><a href="#[c6]">_sys_write</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">mbed_error</a><BR>
 <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[cd]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[cd]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_6_7_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from .\build\except.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1a]">I2C3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[13]">LPTIM1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[2b]">LPTIM_IRQHandler</a> from .\build\lp_ticker.o(.text.LPTIM_IRQHandler) referenced from .\build\lp_ticker.o(.text.__NVIC_SetVector)
 <LI><a href="#[1]">NMI_Handler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[a]">RCC_CRS_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[22]">RNG_LPUART1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\rtx_kernel.o(.text.svcRtxKernelStart)
 <LI><a href="#[5]">SysTick_Handler</a> from .\build\irq_cm0.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from .\build\system_stm32l0xx.o(.text.SystemInit) referenced from .\build\startup_stm32l072xx.o(.text)
 <LI><a href="#[19]">TIM21_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[1b]">TIM22_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[18]">TIM7_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[e]">TSC_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[20]">USART1_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[14]">USART4_5_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[23]">USB_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from .\build\startup_stm32l072xx.o(.text) referenced from .\build\startup_stm32l072xx.o(RESET)
 <LI><a href="#[7b]">_GLOBAL__sub_I_main.cpp</a> from .\build\main.o(.text._GLOBAL__sub_I_main.cpp) referenced from .\build\main.o(.init_array)
 <LI><a href="#[2d]">check_time()</a> from .\build\main.o(.text._Z10check_timev) referenced from .\build\main.o(.text.main)
 <LI><a href="#[2f]">button_change()</a> from .\build\main.o(.text._Z13button_changev) referenced from .\build\main.o(.text.main)
 <LI><a href="#[26]">state_timeout()</a> from .\build\main.o(.text._Z13state_timeoutv) referenced from .\build\main.o(.text._Z14compare_valuest)
 <LI><a href="#[2e]">print()</a> from .\build\main.o(.text._Z5printv) referenced from .\build\main.o(.text.main)
 <LI><a href="#[7c]">default_idle_hook()</a> from .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv) referenced from .\build\mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
 <LI><a href="#[27]">rtos_event_pending(void*)</a> from .\build\mbed_rtx_idle.o(.text._ZL18rtos_event_pendingPv) referenced from .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv)
 <LI><a href="#[4d]">DirectSerial::read(void*, unsigned int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4f]">DirectSerial::seek(long, int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[55]">DirectSerial::size()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[50]">DirectSerial::close()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4e]">DirectSerial::write(void const*, unsigned int)</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[52]">DirectSerial::isatty()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4c]">DirectSerial::~DirectSerial__deallocating()</a> from .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[59]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[59]">mbed::FileHandle::enable_input(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[57]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[57]">mbed::FileHandle::set_blocking(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5a]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[5a]">mbed::FileHandle::enable_output(bool)</a> from .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[60]">mbed::FileHandle::size()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[51]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[51]">mbed::FileHandle::sync()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[53]">mbed::FileHandle::tell()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[53]">mbed::FileHandle::tell()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle4tellEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5c]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[5c]">mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</a> from .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5f]">mbed::FileHandle::isatty()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[54]">mbed::FileHandle::rewind()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[54]">mbed::FileHandle::rewind()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle6rewindEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[56]">mbed::FileHandle::truncate(long)</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[56]">mbed::FileHandle::truncate(long)</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandle8truncateEl) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5d]">mbed::FileHandle::~FileHandle__deallocating()</a> from .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[4b]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandleD2Ev) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[4b]">mbed::FileHandle::~FileHandle__sub_object()</a> from .\build\bufferedserial.o(.text._ZN4mbed10FileHandleD2Ev) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[62]">mbed::TickerBase::handler()</a> from .\build\ticker.o(.text._ZN4mbed10TickerBase7handlerEv) referenced from .\build\ticker.o(.rodata._ZTVN4mbed10TickerBaseE)
 <LI><a href="#[62]">mbed::TickerBase::handler()</a> from .\build\ticker.o(.text._ZN4mbed10TickerBase7handlerEv) referenced from .\build\ticker.o(.rodata._ZTVN4mbed6TickerE)
 <LI><a href="#[28]">mbed::TimerEvent::irq(unsigned int)</a> from .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj) referenced from .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
 <LI><a href="#[63]">mbed::TimeoutBase::handler()</a> from .\build\timeout.o(.text._ZN4mbed11TimeoutBase7handlerEv) referenced from .\build\timeout.o(.rodata._ZTVN4mbed11TimeoutBaseE)
 <LI><a href="#[63]">mbed::TimeoutBase::handler()</a> from .\build\timeout.o(.text._ZN4mbed11TimeoutBase7handlerEv) referenced from .\build\timeout.o(.rodata._ZTVN4mbed7TimeoutE)
 <LI><a href="#[66]">mbed::AnalogIn::lock()</a> from .\build\analogin.o(.text._ZN4mbed8AnalogIn4lockEv) referenced from .\build\analogin.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[67]">mbed::AnalogIn::unlock()</a> from .\build\analogin.o(.text._ZN4mbed8AnalogIn6unlockEv) referenced from .\build\analogin.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[65]">mbed::AnalogIn::~AnalogIn__deallocating()</a> from .\build\analogin.o(.text._ZN4mbed8AnalogInD0Ev) referenced from .\build\analogin.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[64]">mbed::AnalogIn::~AnalogIn__sub_object()</a> from .\build\analogin.o(.text._ZN4mbed8AnalogInD2Ev) referenced from .\build\analogin.o(.rodata._ZTVN4mbed8AnalogInE)
 <LI><a href="#[29]">void mbed::Callback&lang;void ()&rang;::target_call&lang;void (*)()&rang;(mbed::detail::CallbackBase const*)</a> from .\build\arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEE11target_callIPS1_EEvPKNS_6detail12CallbackBaseE) referenced from .\build\arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEE8generateIPS1_vEEvOT_)
 <LI><a href="#[68]">mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()</a> from .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE7handlerEv) referenced from .\build\systimer.o(.rodata._ZTVN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEE)
 <LI><a href="#[2a]">rtos::Thread::_thunk(void*)</a> from .\build\thread.o(.text._ZN4rtos6Thread6_thunkEPv) referenced from .\build\thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
 <LI><a href="#[6a]">rtos::Thread::~Thread__deallocating()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD0Ev) referenced from .\build\thread.o(.rodata._ZTVN4rtos6ThreadE)
 <LI><a href="#[69]">rtos::Thread::~Thread__sub_object()</a> from .\build\thread.o(.text._ZN4rtos6ThreadD2Ev) referenced from .\build\thread.o(.rodata._ZTVN4rtos6ThreadE)
 <LI><a href="#[5b]">DirectSerial::poll(short) const</a> from .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[58]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\mbed_retarget.o(.rodata._ZTV12DirectSerial)
 <LI><a href="#[58]">mbed::FileHandle::is_blocking() const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[61]">mbed::FileHandle::poll(short) const</a> from .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs) referenced from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5e]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_p.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced 4 times from .\build\filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
 <LI><a href="#[5e]">__cxa_pure_virtual</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_p.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual) referenced from .\build\timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
 <LI><a href="#[25]">__main</a> from C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__main.o)(!!!main) referenced from .\build\startup_stm32l072xx.o(.text)
 <LI><a href="#[79]">block_us_ticker_free</a> from .\build\mbed_us_ticker_api.o(.text.block_us_ticker_free) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[6e]">lp_ticker_clear_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6d]">lp_ticker_disable_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[70]">lp_ticker_fire_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[71]">lp_ticker_free</a> from .\build\lp_ticker.o(.text.lp_ticker_free) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[72]">lp_ticker_get_info</a> from .\build\lp_ticker.o(.text.lp_ticker_get_info) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6b]">lp_ticker_init</a> from .\build\lp_ticker.o(.text.lp_ticker_init) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6c]">lp_ticker_read</a> from .\build\lp_ticker.o(.text.lp_ticker_read) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[6f]">lp_ticker_set_interrupt</a> from .\build\lp_ticker.o(.text.lp_ticker_set_interrupt) referenced from .\build\mbed_lp_ticker_api.o(.rodata.lp_interface)
 <LI><a href="#[30]">mbed_start</a> from .\build\mbed_boot.o(.text.mbed_start) referenced from .\build\mbed_rtos_rtx.o(.text.mbed_rtos_start)
 <LI><a href="#[3c]">osRtxIdleThread</a> from .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread) referenced from .\build\rtx_thread.o(.text.osRtxThreadStartup)
 <LI><a href="#[45]">osRtxMessageQueuePostProcess</a> from .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess) referenced from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
 <LI><a href="#[46]">osRtxSemaphorePostProcess</a> from .\build\rtx_semaphore.o(.text.osRtxSemaphorePostProcess) referenced from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew)
 <LI><a href="#[48]">osRtxThreadPostProcess</a> from .\build\rtx_thread.o(.text.osRtxThreadPostProcess) referenced from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[4a]">osRtxTimerSetup</a> from .\build\rtx_timer.o(.text.osRtxTimerSetup) referenced from .\build\rtx_lib.o(.rodata)
 <LI><a href="#[49]">osRtxTimerThread</a> from .\build\rtx_timer.o(.text.osRtxTimerThread) referenced from .\build\rtx_lib.o(.rodata)
 <LI><a href="#[3d]">osRtxTimerTick</a> from .\build\rtx_timer.o(.text.osRtxTimerTick) referenced from .\build\rtx_timer.o(.text.osRtxTimerSetup)
 <LI><a href="#[47]">osThreadExit</a> from .\build\rtx_thread.o(.text.osThreadExit) referenced from .\build\rtx_thread.o(.text.svcRtxThreadNew)
 <LI><a href="#[31]">svcRtxKernelGetState</a> from .\build\rtx_kernel.o(.text.svcRtxKernelGetState) referenced from .\build\rtx_kernel.o(.text.osKernelGetState)
 <LI><a href="#[32]">svcRtxKernelInitialize</a> from .\build\rtx_kernel.o(.text.svcRtxKernelInitialize) referenced from .\build\rtx_kernel.o(.text.osKernelInitialize)
 <LI><a href="#[33]">svcRtxKernelResume</a> from .\build\rtx_kernel.o(.text.svcRtxKernelResume) referenced from .\build\rtx_kernel.o(.text.osKernelResume)
 <LI><a href="#[34]">svcRtxKernelStart</a> from .\build\rtx_kernel.o(.text.svcRtxKernelStart) referenced from .\build\rtx_kernel.o(.text.osKernelStart)
 <LI><a href="#[35]">svcRtxKernelSuspend</a> from .\build\rtx_kernel.o(.text.svcRtxKernelSuspend) referenced from .\build\rtx_kernel.o(.text.osKernelSuspend)
 <LI><a href="#[36]">svcRtxMessageQueueGet</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet) referenced from .\build\rtx_msgqueue.o(.text.osMessageQueueGet)
 <LI><a href="#[37]">svcRtxMessageQueuePut</a> from .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut) referenced from .\build\rtx_msgqueue.o(.text.osMessageQueuePut)
 <LI><a href="#[38]">svcRtxMutexAcquire</a> from .\build\rtx_mutex.o(.text.svcRtxMutexAcquire) referenced from .\build\rtx_mutex.o(.text.osMutexAcquire)
 <LI><a href="#[39]">svcRtxMutexDelete</a> from .\build\rtx_mutex.o(.text.svcRtxMutexDelete) referenced from .\build\rtx_mutex.o(.text.osMutexDelete)
 <LI><a href="#[3a]">svcRtxMutexNew</a> from .\build\rtx_mutex.o(.text.svcRtxMutexNew) referenced from .\build\rtx_mutex.o(.text.osMutexNew)
 <LI><a href="#[3b]">svcRtxMutexRelease</a> from .\build\rtx_mutex.o(.text.svcRtxMutexRelease) referenced from .\build\rtx_mutex.o(.text.osMutexRelease)
 <LI><a href="#[3e]">svcRtxSemaphoreDelete</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreDelete) referenced from .\build\rtx_semaphore.o(.text.osSemaphoreDelete)
 <LI><a href="#[3f]">svcRtxSemaphoreNew</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew) referenced from .\build\rtx_semaphore.o(.text.osSemaphoreNew)
 <LI><a href="#[40]">svcRtxSemaphoreRelease</a> from .\build\rtx_semaphore.o(.text.svcRtxSemaphoreRelease) referenced from .\build\rtx_semaphore.o(.text.osSemaphoreRelease)
 <LI><a href="#[41]">svcRtxThreadExit</a> from .\build\rtx_thread.o(.text.svcRtxThreadExit) referenced from .\build\rtx_thread.o(.text.osThreadExit)
 <LI><a href="#[42]">svcRtxThreadGetId</a> from .\build\rtx_thread.o(.text.svcRtxThreadGetId) referenced from .\build\rtx_thread.o(.text.osThreadGetId)
 <LI><a href="#[43]">svcRtxThreadNew</a> from .\build\rtx_thread.o(.text.svcRtxThreadNew) referenced from .\build\rtx_thread.o(.text.osThreadNew)
 <LI><a href="#[44]">svcRtxThreadTerminate</a> from .\build\rtx_thread.o(.text.svcRtxThreadTerminate) referenced from .\build\rtx_thread.o(.text.osThreadTerminate)
 <LI><a href="#[7d]">ticker_irq_handler</a> from .\build\mbed_ticker_api.o(.text.ticker_irq_handler) referenced 2 times from .\build\mbed_lp_ticker_api.o(.data.irq_handler)
 <LI><a href="#[2c]">timer_irq_handler</a> from .\build\us_ticker.o(.text.timer_irq_handler) referenced from .\build\us_ticker.o(.text.__NVIC_SetVector)
 <LI><a href="#[76]">us_ticker_clear_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_clear_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[75]">us_ticker_disable_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_disable_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[78]">us_ticker_fire_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_fire_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[7a]">us_ticker_get_info</a> from .\build\us_ticker.o(.text.us_ticker_get_info) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[73]">us_ticker_init</a> from .\build\us_ticker.o(.text.us_ticker_init) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[74]">us_ticker_read</a> from .\build\us_ticker.o(.text.us_ticker_read) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
 <LI><a href="#[77]">us_ticker_set_interrupt</a> from .\build\us_ticker.o(.text.us_ticker_set_interrupt) referenced from .\build\mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__main.o)(!!!main))
<BR><BR>[Stack]<UL><LI>Max Depth = 768 + Unknown Stack Size
<LI>Call Chain = __main &rArr; __rt_entry &rArr; mbed_rtos_start &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[84]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[86]"></a>__scatterload_rt2</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[2c1]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[2c2]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter.o)(!!!scatter), UNUSED)

<P><STRONG><a name="[87]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter_copy.o)(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[2c3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(__scatter_zi.o)(!!handler_zi), UNUSED)

<P><STRONG><a name="[e0]"></a>$Super$$__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit.o)(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[2c4]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[88]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2c5]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[2c6]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[2c7]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[2c8]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[2c9]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[2ca]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[2cb]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[2cc]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[2cd]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[2ce]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[2cf]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[2d0]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[2d1]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[8a]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 952 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[2d2]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[2d3]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[2d4]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[8c]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[2d5]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[2d6]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[2d7]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[2d8]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libinit2.o)(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[af]"></a>__aeabi_memcpy4</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[2d9]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.emb_text), UNUSED)

<P><STRONG><a name="[2da]"></a>__rt_lib_shutdown_heap_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[2db]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libshutdown2.o)(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = HardFault_Handler &rArr; Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[8f]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[2dc]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\except.o(.text), UNUSED)

<P><STRONG><a name="[8d]"></a>Fault_Handler</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, .\build\except.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = Fault_Handler &rArr; mbed_fault_handler &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = PendSV_Handler &rArr; osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\irq_cm0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = SysTick_Handler &rArr; osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>
<BR>[Address Reference Count : 2]<UL><LI> rtx_kernel.o(.text.svcRtxKernelStart)
<LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>I2C3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>RNG_LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>USART4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>USB_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, .\build\startup_stm32l072xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(RESET)
</UL>
<P><STRONG><a name="[2dd]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(use_no_semi_2.o)(.text), UNUSED)

<P><STRONG><a name="[93]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned int)
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[2de]"></a>__errno$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[2df]"></a>__rt_errno_addr$twolibspace</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_errno_addr_twolibspace.o)(.text), UNUSED)

<P><STRONG><a name="[97]"></a>malloc_internal$concurrent</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[99]"></a>malloc</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_alloc_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int, std::nothrow_t const&)
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[9b]"></a>free_internal$concurrent</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>

<P><STRONG><a name="[9c]"></a>free</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_free_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[202]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llshl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>

<P><STRONG><a name="[2e0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llshl.o)(.text), UNUSED)

<P><STRONG><a name="[203]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llushr.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>

<P><STRONG><a name="[2e1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llushr.o)(.text), UNUSED)

<P><STRONG><a name="[1ae]"></a>__aeabi_lmul</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llmul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>

<P><STRONG><a name="[2e2]"></a>_ll_mul</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(llmul.o)(.text), UNUSED)

<P><STRONG><a name="[131]"></a>__aeabi_uldivmod</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(lludiv.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const
</UL>

<P><STRONG><a name="[2e3]"></a>_ll_udiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(lludiv.o)(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>_fseek</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fseek.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _fseek &rArr; _sys_istty &rArr; isatty &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>

<P><STRONG><a name="[2e4]"></a>_fseek$unlocked</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fseek.o)(.text), UNUSED)

<P><STRONG><a name="[2e5]"></a>_ftell$unlocked</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(ftell.o)(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(ftell.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _ftell_internal &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[2e6]"></a>_fclose$unlocked</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fclose.o)(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_fclose_internal</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fclose.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[a6]"></a>fputc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fputc_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
</UL>

<P><STRONG><a name="[a8]"></a>_do_fflush</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>

<P><STRONG><a name="[a9]"></a>fflush</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fflush_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = fflush &rArr; _do_fflush &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ac]"></a>freopen</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 944<LI>Call Chain = freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ad]"></a>fopen</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[197]"></a>strspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(strspn.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
</UL>

<P><STRONG><a name="[190]"></a>memcmp</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(memcmp.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
</UL>

<P><STRONG><a name="[18f]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(strlen.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
</UL>

<P><STRONG><a name="[ae]"></a>__aeabi_memcpy</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2e7]"></a>__rt_memcpy</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memcpy.o)(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>__aeabi_memset4</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_memset4.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memset4
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[2e8]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_memset4.o)(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>_memset_w</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr_w
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>

<P><STRONG><a name="[b2]"></a>_memset</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[b3]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[2e9]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[a5]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(unsigned int, osPriority_t, unsigned int, unsigned char*, char const*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[2ea]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)

<P><STRONG><a name="[b4]"></a>__rt_memclr_w</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_memclr.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[1f1]"></a>strcmp</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(strcmpv6m.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[214]"></a>__aeabi_uidivmod</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_sdivfast.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
</UL>

<P><STRONG><a name="[2eb]"></a>__aeabi_idivmod</STRONG> (Thumb, 472 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_sdivfast.o)(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[2ee]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(heapauxi.o)(.text), UNUSED)

<P><STRONG><a name="[83]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_aeabi.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)

<P><STRONG><a name="[b5]"></a>_dadd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[24c]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[b8]"></a>_dsub</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[2f0]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)

<P><STRONG><a name="[b9]"></a>_drsb</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[24b]"></a>__aeabi_d2lz</STRONG> (Thumb, 0 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfixl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_d2lz
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2f1]"></a>_ll_sfrom_d</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfixl.o)(.text), UNUSED)

<P><STRONG><a name="[250]"></a>__aeabi_d2ulz</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfixul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_d2ulz
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2f2]"></a>_ll_ufrom_d</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfixul.o)(.text), UNUSED)

<P><STRONG><a name="[bb]"></a>__aeabi_l2d_normalise</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfltl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
</UL>

<P><STRONG><a name="[ba]"></a>__aeabi_l2d</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfltl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_l2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2f3]"></a>_ll_sto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfltl.o)(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__aeabi_ul2d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfltl.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_ul2d &rArr; __aeabi_l2d_normalise
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d_normalise
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2f4]"></a>_ll_uto_d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dfltl.o)(.text), UNUSED)

<P><STRONG><a name="[24f]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dmul.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2f5]"></a>_dmul</STRONG> (Thumb, 558 bytes, Stack size 56 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dmul.o)(.text), UNUSED)

<P><STRONG><a name="[2f6]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libspace.o)(.text), UNUSED)

<P><STRONG><a name="[bd]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(libspace.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>

<P><STRONG><a name="[2f7]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[2f8]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(use_no_semi.o)(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>__rt_heap_descriptor</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(rt_heap_descriptor_twolibspace.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_heap_descriptor
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[2f9]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[2fa]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(hguard.o)(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[2fc]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)

<P><STRONG><a name="[98]"></a>__Heap_Full</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[bf]"></a>__Heap_Broken</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[89]"></a>_init_alloc</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(init_alloc.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _init_alloc &rArr; __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c1]"></a>__Heap_Initialize</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_init_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __Heap_Initialize &rArr; _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[2fd]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_init_threads.o)(.text), UNUSED)

<P><STRONG><a name="[c2]"></a>__flsbuf</STRONG> (Thumb, 486 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[2c0]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>

<P><STRONG><a name="[2fe]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(flsbuf.o)(.text), UNUSED)

<P><STRONG><a name="[a1]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[c4]"></a>_writebuf</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _writebuf &rArr; _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[a3]"></a>_fflush</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(stdio.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[c3]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(stdio.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[c7]"></a>setvbuf</STRONG> (Thumb, 104 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(setvbuf_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = setvbuf &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[8b]"></a>_initio</STRONG> (Thumb, 246 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(initio_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = _initio &rArr; freopen &rArr; _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[c9]"></a>_terminateio</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(initio_locked.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[ca]"></a>abort</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(abort.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown (Weak Reference)
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>

<P><STRONG><a name="[2ff]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(maybetermalloc2.o)(.text), UNUSED)

<P><STRONG><a name="[be]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_extend_threads.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUpOffset
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[cf]"></a>puts</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(puts_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = puts &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fputc$unlocked
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_change()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_values(State)
</UL>

<P><STRONG><a name="[cb]"></a>__rt_SIGABRT</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_abrt_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[c8]"></a>__rt_SIGRTRED</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_rtred_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[c0]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_rtmem_outer.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[d4]"></a>__fpl_dcmp_InfNaN</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dcmpin.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[d7]"></a>_terminate_alloc</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(term_alloc.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[d1]"></a>__sig_exit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_exit.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sig_exit
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d0]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_abrt_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[d2]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_rtred_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[d3]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_rtmem_inner.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d5]"></a>__fpl_cmpreturn</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(cmpret.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>

<P><STRONG><a name="[d6]"></a>__fpl_dcheck_NaN2</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dnan2.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>

<P><STRONG><a name="[d8]"></a>__Heap_Finalize</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_final_threads.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminate_alloc
</UL>

<P><STRONG><a name="[d9]"></a>__default_signal_display</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(defsig_general.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>

<P><STRONG><a name="[da]"></a>__fpl_return_NaN</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(retnan.o)(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN2
</UL>

<P><STRONG><a name="[dc]"></a>__2printf</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$__2printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = __2printf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_change()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_values(State)
</UL>

<P><STRONG><a name="[de]"></a>__2vfprintf</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$__2vfprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
</UL>

<P><STRONG><a name="[df]"></a>__rt_lib_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.$Sub$$__rt_lib_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
</UL>

<P><STRONG><a name="[300]"></a>_printf_d</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_d), UNUSED)

<P><STRONG><a name="[301]"></a>_printf_int_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_int_dec), UNUSED)

<P><STRONG><a name="[302]"></a>_printf_percent</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_percent), UNUSED)

<P><STRONG><a name="[303]"></a>_printf_s</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_s), UNUSED)

<P><STRONG><a name="[304]"></a>_printf_str</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_str), UNUSED)

<P><STRONG><a name="[305]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_truncate_unsigned), UNUSED)

<P><STRONG><a name="[306]"></a>_printf_u</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_printf_armlink_overrides.o(.text.$Sub$$_printf_u), UNUSED)

<P><STRONG><a name="[e1]"></a>vsnprintf</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, .\build\mbed_printf_wrapper.o(.text.$Sub$$vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>
<BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>

<P><STRONG><a name="[e6]"></a>EvrRtxKernelError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxKernelError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[26a]"></a>EvrRtxKernelErrorNotify</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_evr.o(.text.EvrRtxKernelErrorNotify))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[e8]"></a>EvrRtxMessageQueueError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMessageQueueError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[e9]"></a>EvrRtxMutexError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxMutexError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[ea]"></a>EvrRtxSemaphoreError</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxSemaphoreError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[eb]"></a>EvrRtxThreadError</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadError))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = EvrRtxThreadError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
</UL>

<P><STRONG><a name="[ec]"></a>EvrRtxThreadExit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EvrRtxThreadExit &rArr; osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadExit
</UL>

<P><STRONG><a name="[ef]"></a>EvrRtxThreadTerminate</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.EvrRtxThreadTerminate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[1e5]"></a>HAL_ADCEx_Calibration_GetValue</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
</UL>

<P><STRONG><a name="[f0]"></a>HAL_ADCEx_Calibration_Start</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, .\build\stm32l0xx_hal_adc_ex.o(.text.HAL_ADCEx_Calibration_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADCEx_Calibration_Start &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
</UL>

<P><STRONG><a name="[f1]"></a>HAL_ADC_ConfigChannel</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_ConfigChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_ADC_ConfigChannel &rArr; ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[1fd]"></a>HAL_ADC_GetValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_GetValue))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[f2]"></a>HAL_ADC_Init</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_ADC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
</UL>

<P><STRONG><a name="[f3]"></a>HAL_ADC_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
</UL>

<P><STRONG><a name="[f4]"></a>HAL_ADC_PollForConversion</STRONG> (Thumb, 220 bytes, Stack size 32 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_PollForConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_PollForConversion &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[f5]"></a>HAL_ADC_Start</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(.text.HAL_ADC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[e5]"></a>HAL_GetTick</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\hal_tick_overrides.o(.text.HAL_GetTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[f8]"></a>HAL_Init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal.o(.text.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[f9]"></a>HAL_InitTick</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\hal_tick_overrides.o(.text.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[fc]"></a>HAL_LPTIM_Counter_Start</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_lptim.o(.text.HAL_LPTIM_Counter_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_LPTIM_Counter_Start &rArr; LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_LPTIM_Init</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, .\build\stm32l0xx_hal_lptim.o(.text.HAL_LPTIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_LPTIM_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[ff]"></a>HAL_LPTIM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_lptim.o(.text.HAL_LPTIM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
</UL>

<P><STRONG><a name="[fa]"></a>HAL_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal.o(.text.HAL_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[11c]"></a>HAL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSEDriveConfig
</UL>

<P><STRONG><a name="[21b]"></a>HAL_PWR_EnterSLEEPMode</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_pwr.o(.text.HAL_PWR_EnterSLEEPMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>

<P><STRONG><a name="[12d]"></a>HAL_RCCEx_CRSConfig</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_CRSConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[100]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 420 bytes, Stack size 48 bytes, .\build\stm32l0xx_hal_rcc_ex.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[101]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 412 bytes, Stack size 32 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[104]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetHCLKFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
</UL>

<P><STRONG><a name="[103]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK1Freq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[105]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetPCLK2Freq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[102]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[106]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1272 bytes, Stack size 56 bytes, .\build\stm32l0xx_hal_rcc.o(.text.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>

<P><STRONG><a name="[107]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_Base_Init &rArr; TIM_Base_SetConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[108]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[220]"></a>HAL_TIM_Base_Start</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_tim.o(.text.HAL_TIM_Base_Start))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[10a]"></a>HAL_TIM_OC_Start</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_tim.o(.text.HAL_TIM_OC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
</UL>

<P><STRONG><a name="[223]"></a>HAL_UARTEx_DisableClockStopMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableClockStopMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[224]"></a>HAL_UARTEx_DisableStopMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_DisableStopMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[221]"></a>HAL_UARTEx_EnableClockStopMode</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableClockStopMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[222]"></a>HAL_UARTEx_EnableStopMode</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart_ex.o(.text.HAL_UARTEx_EnableStopMode), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[10c]"></a>HAL_UART_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_uart.o(.text.HAL_UART_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_AdvFeatureConfig
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
</UL>

<P><STRONG><a name="[10d]"></a>HAL_UART_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\stm32l0xx_hal_uart.o(.text.HAL_UART_MspInit), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[11d]"></a>OS_Tick_AcknowledgeIRQ</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_AcknowledgeIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OS_Tick_AcknowledgeIRQ &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick() &rArr; core_util_atomic_decr_u32 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[112]"></a>OS_Tick_Disable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = OS_Tick_Disable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>

<P><STRONG><a name="[117]"></a>OS_Tick_Enable</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = OS_Tick_Enable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
</UL>

<P><STRONG><a name="[122]"></a>OS_Tick_GetIRQn</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_GetIRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_Tick_GetIRQn
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_irq_number()
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[124]"></a>OS_Tick_Setup</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\mbed_rtx_idle.o(.text.OS_Tick_Setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = OS_Tick_Setup &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_irq_number()
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority(IRQn_Type, unsigned int)
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector(IRQn_Type, unsigned int)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_GetVector(IRQn_Type)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ(IRQn_Type)
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[12a]"></a>SetSysClock</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\system_clock.o(.text.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 616<LI>Call Chain = SetSysClock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock_PLL_HSI
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[12b]"></a>SetSysClock_PLL_HSI</STRONG> (Thumb, 208 bytes, Stack size 160 bytes, .\build\system_clock.o(.text.SetSysClock_PLL_HSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = SetSysClock_PLL_HSI &rArr; HAL_RCC_OscConfig &rArr; HAL_InitTick &rArr; init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_CRSConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[12e]"></a>Set_GPIO_Clock</STRONG> (Thumb, 200 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.Set_GPIO_Clock))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[12f]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 144 bytes, Stack size 8 bytes, .\build\system_stm32l0xx.o(.text.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\system_stm32l0xx.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l072xx.o(.text)
</UL>
<P><STRONG><a name="[256]"></a>TargetBSP_Init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_overrides.o(.text.TargetBSP_Init))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[10f]"></a>UART_AdvFeatureConfig</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_uart.o(.text.UART_AdvFeatureConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[110]"></a>UART_CheckIdleState</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_uart.o(.text.UART_CheckIdleState), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[10e]"></a>UART_SetConfig</STRONG> (Thumb, 544 bytes, Stack size 24 bytes, .\build\stm32l0xx_hal_uart.o(.text.UART_SetConfig), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[130]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 180 bytes, Stack size 40 bytes, .\build\stm32l0xx_hal_uart.o(.text.UART_WaitOnFlagUntilTimeout), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_CheckIdleState
</UL>

<P><STRONG><a name="[2d]"></a>check_time()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\main.o(.text._Z10check_timev))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[13a]"></a>print_values(State)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\main.o(.text._Z12print_values5State))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = print_values(State) &rArr; __2printf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2f]"></a>button_change()</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, .\build\main.o(.text._Z13button_changev))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = button_change() &rArr; __2printf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator=(int)
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[26]"></a>state_timeout()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\main.o(.text._Z13state_timeoutv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text._Z14compare_valuest)
</UL>
<P><STRONG><a name="[13e]"></a>compare_values(unsigned short)</STRONG> (Thumb, 132 bytes, Stack size 48 bytes, .\build\main.o(.text._Z14compare_valuest))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = compare_values(unsigned short) &rArr; mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)())
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d3]"></a>rtos::Mutex* core_util_atomic_load&lang;rtos::Mutex&rang;(rtos::Mutex* const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\analogin.o(.text._Z21core_util_atomic_loadIN4rtos5MutexEEPT_PKS3_))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[1d4]"></a>void core_util_atomic_store&lang;rtos::Mutex&rang;(rtos::Mutex**, rtos::Mutex*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\analogin.o(.text._Z22core_util_atomic_storeIN4rtos5MutexEEvPPT_S3_))
<BR><BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[2e]"></a>print()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\main.o(.text._Z5printv))
<BR>[Address Reference Count : 1]<UL><LI> main.o(.text.main)
</UL>
<P><STRONG><a name="[4d]"></a>DirectSerial::read(void*, unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DirectSerial::read(void*, unsigned int) &rArr; serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[4f]"></a>DirectSerial::seek(long, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4seekEli))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[55]"></a>DirectSerial::size()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial4sizeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[50]"></a>DirectSerial::close()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5closeEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[4e]"></a>DirectSerial::write(void const*, unsigned int)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = DirectSerial::write(void const*, unsigned int) &rArr; serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[52]"></a>DirectSerial::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerial6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[15c]"></a>DirectSerial::DirectSerial(serial_pinmap_t const&, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2ERK15serial_pinmap_ti), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::FileHandle__sub_object()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[14b]"></a>DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialC2ERK15serial_pinmap_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[4c]"></a>DirectSerial::~DirectSerial__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN12DirectSerialD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = DirectSerial::~DirectSerial__deallocating() &rArr; operator delete(void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileHandle::~FileHandle__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[161]"></a>mbed::DigitalOut::read()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOut4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator int()
</UL>

<P><STRONG><a name="[163]"></a>mbed::DigitalOut::write(int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOut5writeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalOut::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write(gpio_t*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator=(int)
</UL>

<P><STRONG><a name="[165]"></a>mbed::DigitalOut::DigitalOut__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\busout.o(.text._ZN4mbed10DigitalOutC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
</UL>

<P><STRONG><a name="[13d]"></a>mbed::DigitalOut::operator=(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\esp8266interface.o(.text._ZN4mbed10DigitalOutaSEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::DigitalOut::operator=(int) &rArr; mbed::DigitalOut::write(int)
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_change()
</UL>

<P><STRONG><a name="[13c]"></a>mbed::DigitalOut::operator int()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed10DigitalOutcviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::DigitalOut::operator int() &rArr; mbed::DigitalOut::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_change()
</UL>

<P><STRONG><a name="[59]"></a>mbed::FileHandle::enable_input(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle12enable_inputEb))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[57]"></a>mbed::FileHandle::set_blocking(bool)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle12set_blockingEb))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[5a]"></a>mbed::FileHandle::enable_output(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle13enable_outputEb))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[60]"></a>mbed::FileHandle::size()</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::FileHandle::size()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[51]"></a>mbed::FileHandle::sync()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle4syncEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[53]"></a>mbed::FileHandle::tell()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\bufferedserial.o(.text._ZN4mbed10FileHandle4tellEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::tell()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[5c]"></a>mbed::FileHandle::sigio(mbed::Callback&lang;void ()&rang;)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\file.o(.text._ZN4mbed10FileHandle5sigioENS_8CallbackIFvvEEE))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[5f]"></a>mbed::FileHandle::isatty()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandle6isattyEv))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[54]"></a>mbed::FileHandle::rewind()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\bufferedserial.o(.text._ZN4mbed10FileHandle6rewindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FileHandle::rewind()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[56]"></a>mbed::FileHandle::truncate(long)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\bufferedserial.o(.text._ZN4mbed10FileHandle8truncateEl))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[15d]"></a>mbed::FileHandle::FileHandle__sub_object()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\bufferedserial.o(.text._ZN4mbed10FileHandleC2Ev), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(serial_pinmap_t const&, int)
</UL>

<P><STRONG><a name="[5d]"></a>mbed::FileHandle::~FileHandle__deallocating()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\filehandle.o(.text._ZN4mbed10FileHandleD0Ev))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[4b]"></a>mbed::FileHandle::~FileHandle__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\bufferedserial.o(.text._ZN4mbed10FileHandleD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[167]"></a>mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\ticker.o(.text._ZN4mbed10TickerBase5setupENSt3__26chrono8durationIxNS1_5ratioILx1ELx1000000EEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;) &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::now() const
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[62]"></a>mbed::TickerBase::handler()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\ticker.o(.text._ZN4mbed10TickerBase7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed::TickerBase::handler() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator bool() const
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator()() const
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::get_time_point(ticker_event_s const&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> ticker.o(.rodata._ZTVN4mbed10TickerBaseE)
<LI> ticker.o(.rodata._ZTVN4mbed6TickerE)
</UL>
<P><STRONG><a name="[140]"></a>mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)</STRONG> (Thumb, 80 bytes, Stack size 40 bytes, .\build\ticker.o(.text._ZN4mbed10TickerBase9attach_usENS_8CallbackIFvvEEEy))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator bool() const
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_values(unsigned short)
</UL>

<P><STRONG><a name="[171]"></a>mbed::TickerBase::TickerBase(ticker_data_t const*, bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\ticker.o(.text._ZN4mbed10TickerBaseC2EPK13ticker_data_tb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object()
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>

<P><STRONG><a name="[17a]"></a>mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\ticker.o(.text._ZN4mbed10TickerBaseC2EPK13ticker_data_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool)
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>

<P><STRONG><a name="[16a]"></a>mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent15insert_absoluteENSt3__26chrono10time_pointINS_15TickerDataClockENS2_8durationIxNS1_5ratioILx1ELx1000000EEEEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::handler()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;)
</UL>

<P><STRONG><a name="[28]"></a>mbed::TimerEvent::irq(unsigned int)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent3irqEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::TimerEvent::irq(unsigned int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t)
</UL>
<P><STRONG><a name="[168]"></a>mbed::TimerEvent::remove()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEvent6removeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = mbed::TimerEvent::remove() &rArr; mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::remove_event(ticker_event_s*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;)
</UL>

<P><STRONG><a name="[172]"></a>mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed10TimerEventC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; mbed::TickerDataClock::set_handler(void (*)(unsigned int)) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::set_handler(void (*)(unsigned int))
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::TickerDataClock__sub_object(ticker_data_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::TickerBase(ticker_data_t const*, bool)
</UL>

<P><STRONG><a name="[63]"></a>mbed::TimeoutBase::handler()</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, .\build\timeout.o(.text._ZN4mbed11TimeoutBase7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbed::TimeoutBase::handler() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator bool() const
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator()() const
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator=(std::nullptr_t)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>
<BR>[Address Reference Count : 2]<UL><LI> timeout.o(.rodata._ZTVN4mbed11TimeoutBaseE)
<LI> timeout.o(.rodata._ZTVN4mbed7TimeoutE)
</UL>
<P><STRONG><a name="[179]"></a>mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\timeout.o(.text._ZN4mbed11TimeoutBaseCI2NS_10TickerBaseEEPK13ticker_data_tb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool) &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::Timeout()
</UL>

<P><STRONG><a name="[16b]"></a>mbed::get_time_point(ticker_event_s const&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed14get_time_pointERK14ticker_event_s))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::handler()
</UL>

<P><STRONG><a name="[177]"></a>mbed::TickerDataClock::set_handler(void (*)(unsigned int))</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed15TickerDataClock11set_handlerEPFvjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed::TickerDataClock::set_handler(void (*)(unsigned int)) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>

<P><STRONG><a name="[174]"></a>mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, .\build\timerevent.o(.text._ZN4mbed15TickerDataClock12insert_eventEP14ticker_event_sNSt3__26chrono10time_pointIS0_NS4_8durationIxNS3_5ratioILx1ELx1000000EEEEEEEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)
</UL>

<P><STRONG><a name="[175]"></a>mbed::TickerDataClock::remove_event(ticker_event_s*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\timerevent.o(.text._ZN4mbed15TickerDataClock12remove_eventEP14ticker_event_s))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>

<P><STRONG><a name="[176]"></a>mbed::TickerDataClock::TickerDataClock__sub_object(ticker_data_t const*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\timer.o(.text._ZN4mbed15TickerDataClockC2EPK13ticker_data_t))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>

<P><STRONG><a name="[17e]"></a>mbed::mbed_file_handle(int)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZN4mbed16mbed_file_handleEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
</UL>

<P><STRONG><a name="[16e]"></a>mbed::CriticalSectionLock::CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::CriticalSectionLock::CriticalSectionLock() &rArr; core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[307]"></a>mbed::CriticalSectionLock::CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockC2Ev), UNUSED)

<P><STRONG><a name="[170]"></a>mbed::CriticalSectionLock::~CriticalSectionLock()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::CriticalSectionLock::~CriticalSectionLock() &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[308]"></a>mbed::CriticalSectionLock::~CriticalSectionLock__sub_object()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\criticalsectionlock.o(.text._ZN4mbed19CriticalSectionLockD2Ev), UNUSED)

<P><STRONG><a name="[142]"></a>mbed::mbed_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN4mbed21mbed_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[143]"></a>mbed::mbed_target_override_console(int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZN4mbed28mbed_target_override_consoleEi))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[17f]"></a>mbed::Ticker::Ticker()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\ticker.o(.text._ZN4mbed6TickerC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Ticker::Ticker() &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
</UL>

<P><STRONG><a name="[309]"></a>mbed::Ticker::Ticker__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\ticker.o(.text._ZN4mbed6TickerC2Ev), UNUSED)

<P><STRONG><a name="[181]"></a>mbed::detail::CallbackBase::clear()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed6detail12CallbackBase5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::detail::CallbackBase::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::control()
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator=(std::nullptr_t)
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)())
</UL>

<P><STRONG><a name="[182]"></a>mbed::detail::CallbackBase::control()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed6detail12CallbackBase7controlEv))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::clear()
</UL>

<P><STRONG><a name="[18d]"></a>mbed::detail::CallbackBase::destroy()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\asyncop.o(.text._ZN4mbed6detail12CallbackBase7destroyEv))
<BR><BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator=(std::nullptr_t)
</UL>

<P><STRONG><a name="[18b]"></a>mbed::detail::CallbackBase::CallbackBase__sub_object(std::nullptr_t)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\asyncop.o(.text._ZN4mbed6detail12CallbackBaseC2EDn))
<BR><BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object()
</UL>

<P><STRONG><a name="[183]"></a>void mbed::detail::invoke_r&lang;void, void (*&)(), 0&rang;(void (*&)())</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed6detail8invoke_rIvRPFvvEJELi0EEET_OT0_DpOT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = void mbed::detail::invoke_r&lang;void, void (*&)(), 0&rang;(void (*&)()) &rArr; mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)()) &rArr; std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void ()&rang;::target_call&lang;void (*)()&rang;(mbed::detail::CallbackBase const*)
</UL>

<P><STRONG><a name="[185]"></a>mbed::Timeout::Timeout()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\timeout.o(.text._ZN4mbed7TimeoutC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = mbed::Timeout::Timeout() &rArr; mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool) &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
</UL>

<P><STRONG><a name="[30a]"></a>mbed::Timeout::Timeout__sub_object()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\timeout.o(.text._ZN4mbed7TimeoutC2Ev), UNUSED)

<P><STRONG><a name="[66]"></a>mbed::AnalogIn::lock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogIn4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbed::AnalogIn::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__sub_object()
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName, float)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogin.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[67]"></a>mbed::AnalogIn::unlock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogIn6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mbed::AnalogIn::unlock() &rArr; rtos::Mutex::unlock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogin.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[186]"></a>mbed::AnalogIn::read_u16()</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogIn8read_u16Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::AnalogIn::read_u16() &rArr; analogin_read_u16 &rArr; adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[188]"></a>mbed::AnalogIn::AnalogIn(PinName, float)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogInC2E7PinNamef))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbed::AnalogIn::AnalogIn(PinName, float) &rArr; analogin_init &rArr; pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>

<P><STRONG><a name="[30b]"></a>mbed::AnalogIn::AnalogIn__sub_object(PinName, float)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogInC2E7PinNamef), UNUSED)

<P><STRONG><a name="[65]"></a>mbed::AnalogIn::~AnalogIn__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogInD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbed::AnalogIn::~AnalogIn__deallocating() &rArr; mbed::AnalogIn::~AnalogIn__sub_object() &rArr; mbed::AnalogIn::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__sub_object()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogin.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[64]"></a>mbed::AnalogIn::~AnalogIn__sub_object()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\analogin.o(.text._ZN4mbed8AnalogInD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = mbed::AnalogIn::~AnalogIn__sub_object() &rArr; mbed::AnalogIn::lock() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_free
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> analogin.o(.rodata._ZTVN4mbed8AnalogInE)
</UL>
<P><STRONG><a name="[29]"></a>void mbed::Callback&lang;void ()&rang;::target_call&lang;void (*)()&rang;(mbed::detail::CallbackBase const*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEE11target_callIPS1_EEvPKNS_6detail12CallbackBaseE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void mbed::Callback&lang;void ()&rang;::target_call&lang;void (*)()&rang;(mbed::detail::CallbackBase const*) &rArr; void mbed::detail::invoke_r&lang;void, void (*&)(), 0&rang;(void (*&)()) &rArr; mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)()) &rArr; std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::detail::invoke_r&lang;void, void (*&)(), 0&rang;(void (*&)())
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEE8generateIPS1_vEEvOT_)
</UL>
<P><STRONG><a name="[18c]"></a>void mbed::Callback&lang;void ()&rang;::generate&lang;void (*)(), void&rang;(void (*&&)())</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEE8generateIPS1_vEEvOT_))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)())
</UL>

<P><STRONG><a name="[173]"></a>mbed::Callback&lang;void ()&rang;::Callback__sub_object()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\asyncop.o(.text._ZN4mbed8CallbackIFvvEEC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void ()&rang;::Callback__sub_object()
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::CallbackBase__sub_object(std::nullptr_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::TickerBase(ticker_data_t const*, bool)
</UL>

<P><STRONG><a name="[13f]"></a>mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)())</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mbed8CallbackIFvvEEC2IPS1_Li0EEET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)()) &rArr; mbed::detail::CallbackBase::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::Callback&lang;void ()&rang;::generate&lang;void (*)(), void&rang;(void (*&&)())
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_values(unsigned short)
</UL>

<P><STRONG><a name="[178]"></a>mbed::Callback&lang;void ()&rang;::operator=(std::nullptr_t)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\asyncop.o(.text._ZN4mbed8CallbackIFvvEEaSEDn))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void ()&rang;::operator=(std::nullptr_t) &rArr; mbed::detail::CallbackBase::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::destroy()
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::handler()
</UL>

<P><STRONG><a name="[193]"></a>mbed::FileBase::getPathType()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase11getPathTypeEv))
<BR><BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>

<P><STRONG><a name="[18e]"></a>mbed::FileBase::lookup(char const*, unsigned int)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, .\build\filebase.o(.text._ZN4mbed8FileBase6lookupEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 808<LI>Call Chain = mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
</UL>

<P><STRONG><a name="[191]"></a>mbed::FilePath::fileSystem()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath10fileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::fileSystem() &rArr; mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFileSystem()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[192]"></a>mbed::FilePath::isFileSystem()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath12isFileSystemEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFileSystem()
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
</UL>

<P><STRONG><a name="[194]"></a>mbed::FilePath::file()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath4fileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::FilePath::file() &rArr; mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[25b]"></a>mbed::FilePath::exists()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6existsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[195]"></a>mbed::FilePath::isFile()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath6isFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::FilePath::isFile()
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::getPathType()
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[25c]"></a>mbed::FilePath::fileName()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\filepath.o(.text._ZN4mbed8FilePath8fileNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[196]"></a>mbed::FilePath::FilePath(char const*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[30c]"></a>mbed::FilePath::FilePath__sub_object(char const*)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\filepath.o(.text._ZN4mbed8FilePathC2EPKc), UNUSED)

<P><STRONG><a name="[120]"></a>mbed::internal::init_os_timer()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal13init_os_timerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; mbed::TickerDataClock::set_handler(void (*)(unsigned int)) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_lp_ticker_data
</UL>
<BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::timed_predicate_op__sub_object(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[19a]"></a>void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18do_sleep_operationINS0_18timed_predicate_opEEEvRT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 872<LI>Call Chain = void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::wake_condition() const
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::sleep_prepared()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::sleep_prepare()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[19c]"></a>mbed::internal::timed_predicate_op::sleep_prepare()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18timed_predicate_op13sleep_prepareEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[19d]"></a>mbed::internal::timed_predicate_op::sleep_prepared()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18timed_predicate_op14sleep_preparedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::internal::timed_predicate_op::sleep_prepared()
</UL>
<BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::wake_time_set() const
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[1a0]"></a>mbed::internal::timed_predicate_op::timed_predicate_op__sub_object(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18timed_predicate_opC2ENSt3__26chrono10time_pointINS0_7OsClockENS3_8durationIxNS2_5ratioILx1ELx1000EEEEEEEPFbPvESB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbed::internal::timed_predicate_op::timed_predicate_op__sub_object(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*) &rArr; mbed::internal::init_os_timer() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; mbed::TickerDataClock::set_handler(void (*)(unsigned int)) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[1a1]"></a>mbed::internal::timed_predicate_op::~timed_predicate_op__sub_object()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal18timed_predicate_opD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = mbed::internal::timed_predicate_op::~timed_predicate_op__sub_object() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[1a3]"></a>mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal23do_timed_sleep_absoluteENSt3__26chrono10time_pointINS0_7OsClockENS2_8durationIxNS1_5ratioILx1ELx1000EEEEEEEPFbPvESA_))
<BR><BR>[Stack]<UL><LI>Max Depth = 912<LI>Call Chain = mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::now_with_init_done()
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::~timed_predicate_op__sub_object()
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::timed_predicate_op__sub_object(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[151]"></a>mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*)</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal45do_timed_sleep_relative_to_acknowledged_ticksENSt3__26chrono8durationIjNS1_5ratioILx1ELx1000EEEEEPFbPvES7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*) &rArr; mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::acknowledged_ticks()
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[19e]"></a>mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal7OsClock13set_wake_timeENSt3__26chrono10time_pointIS1_NS3_8durationIxNS2_5ratioILx1ELx1000EEEEEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::sleep_prepare()
</UL>

<P><STRONG><a name="[1a7]"></a>mbed::internal::OsClock::reported_ticks()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal7OsClock14reported_ticksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = mbed::internal::OsClock::reported_ticks() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const &rArr; core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::acknowledged_ticks()
</UL>

<P><STRONG><a name="[1a5]"></a>mbed::internal::OsClock::acknowledged_ticks()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal7OsClock18acknowledged_ticksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mbed::internal::OsClock::acknowledged_ticks() &rArr; mbed::internal::OsClock::reported_ticks() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const &rArr; core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::unacknowledged_ticks() const
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::reported_ticks()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[1a4]"></a>mbed::internal::OsClock::now_with_init_done()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_os_timer.o(.text._ZN4mbed8internal7OsClock18now_with_init_doneEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = mbed::internal::OsClock::now_with_init_done() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const &rArr; mbed::TickerDataClock::now() const &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*)
</UL>

<P><STRONG><a name="[121]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE10start_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_set_irq_pending()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
</UL>

<P><STRONG><a name="[11f]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE11cancel_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_clear_irq_pending()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
</UL>

<P><STRONG><a name="[1a2]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE11cancel_wakeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake() &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::remove()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::~timed_predicate_op__sub_object()
</UL>

<P><STRONG><a name="[1a6]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)</STRONG> (Thumb, 232 bytes, Stack size 56 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE13set_wake_timeENS2_6chrono10time_pointIS5_NS6_8durationIyS4_EEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 832<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::operator-&rang;() const
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
</UL>

<P><STRONG><a name="[1ac]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE14_schedule_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;)
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()
</UL>

<P><STRONG><a name="[123]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_irq_number()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE14get_irq_numberEv))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
</UL>

<P><STRONG><a name="[1b2]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_increment_tick()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE15_increment_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_increment_tick()
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()
</UL>

<P><STRONG><a name="[1ab]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_set_irq_pending()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE16_set_irq_pendingEv))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick()
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()
</UL>

<P><STRONG><a name="[11e]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE16acknowledge_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick() &rArr; core_util_atomic_decr_u32 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u32
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_set_irq_pending()
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
</UL>

<P><STRONG><a name="[1ad]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_clear_irq_pending()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE18_clear_irq_pendingEv))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick()
</UL>

<P><STRONG><a name="[1aa]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE19update_and_get_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const &rArr; mbed::TickerDataClock::now() const &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::now_with_init_done()
</UL>

<P><STRONG><a name="[68]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE7handlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::handler() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_set_irq_pending()
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_increment_tick()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systimer.o(.rodata._ZTVN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEE)
</UL>
<P><STRONG><a name="[199]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEC2EPK13ticker_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*) &rArr; mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*) &rArr; mbed::TickerDataClock::set_handler(void (*)(unsigned int)) &rArr; ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::now() const
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimerEvent::TimerEvent__sub_object(ticker_data_t const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
</UL>

<P><STRONG><a name="[30d]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer__sub_object(ticker_data_t const*)</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZN4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EEC2EPK13ticker_data_t), UNUSED)

<P><STRONG><a name="[1b3]"></a>mbed::DigitalIn::read()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed9DigitalIn4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_read(gpio_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::operator int()
</UL>

<P><STRONG><a name="[1b5]"></a>mbed::DigitalIn::DigitalIn__sub_object(PinName)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, .\build\busin.o(.text._ZN4mbed9DigitalInC2E7PinName))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
</UL>

<P><STRONG><a name="[13b]"></a>mbed::DigitalIn::operator int()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\main.o(.text._ZN4mbed9DigitalIncviEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::DigitalIn::operator int() &rArr; mbed::DigitalIn::read()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;button_change()
</UL>

<P><STRONG><a name="[1b7]"></a>std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mstd4impl6INVOKEIRPFvvEJEEENSt3__29enable_ifIXoontsr3std17is_member_pointerINS5_5decayIT_E4typeEEE5valueaasr3std24is_member_object_pointerISA_EE5valuenesZfp0_Li1EEDTclclsr3stdE7forwardIS8_Efp_Espclsr3stdE7forwardIT0_Efp0_EEEE4typeEOS8_DpOSB_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)())
</UL>

<P><STRONG><a name="[184]"></a>mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)())</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZN4mstd6invokeIRPFvvEJEEENS_13invoke_resultIT_JDpT0_EE4typeEOS5_DpOS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mstd::invoke_result&lang;void (*&)()&rang;::type mstd::invoke&lang;void (*&)()&rang;(void (*&)()) &rArr; std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__2::enable_if&lang;(!(std::is_member_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value)) || ((std::is_member_object_pointer&lang;std::__2::decay&lang;void (*&)()&rang;::type&rang;::value) && ((sizeof... (fp0)) != (1))), decltype(std::forward&lang;void (*&)()&rang;(fp)())&rang;::type mstd::impl::INVOKE&lang;void (*&)()&rang;(void (*&)())
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::detail::invoke_r&lang;void, void (*&)(), 0&rang;(void (*&)())
</UL>

<P><STRONG><a name="[1b8]"></a>rtos::Mutex::constructor(char const*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex11constructorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Mutex::constructor(char const*) &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
</UL>

<P><STRONG><a name="[156]"></a>rtos::Mutex::lock()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex4lockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[157]"></a>rtos::Mutex::unlock()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mutex.o(.text._ZN4rtos5Mutex6unlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = rtos::Mutex::unlock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::unlock()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[1bc]"></a>rtos::Mutex::Mutex()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(char const*) &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[30e]"></a>rtos::Mutex::Mutex__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexC2Ev), UNUSED)

<P><STRONG><a name="[1bd]"></a>rtos::Mutex::~Mutex()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[30f]"></a>rtos::Mutex::~Mutex__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\mutex.o(.text._ZN4rtos5MutexD2Ev), UNUSED)

<P><STRONG><a name="[1bf]"></a>rtos::Thread::constructor(osPriority_t, unsigned int, unsigned char*, char const*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\thread.o(.text._ZN4rtos6Thread11constructorE12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = rtos::Thread::constructor(osPriority_t, unsigned int, unsigned char*, char const*) &rArr; rtos::Thread::constructor(unsigned int, osPriority_t, unsigned int, unsigned char*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(unsigned int, osPriority_t, unsigned int, unsigned char*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)
</UL>

<P><STRONG><a name="[1c0]"></a>rtos::Thread::constructor(unsigned int, osPriority_t, unsigned int, unsigned char*, char const*)</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, .\build\thread.o(.text._ZN4rtos6Thread11constructorEj12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtos::Thread::constructor(unsigned int, osPriority_t, unsigned int, unsigned char*, char const*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned int, unsigned char*, char const*)
</UL>

<P><STRONG><a name="[1c1]"></a>rtos::Thread::start(mbed::Callback&lang;void ()&rang;)</STRONG> (Thumb, 224 bytes, Stack size 40 bytes, .\build\thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = rtos::Thread::start(mbed::Callback&lang;void ()&rang;) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[](unsigned int, std::nothrow_t const&)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2a]"></a>rtos::Thread::_thunk(void*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6Thread6_thunkEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = rtos::Thread::_thunk(void*) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator()() const
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.text._ZN4rtos6Thread5startEN4mbed8CallbackIFvvEEE)
</UL>
<P><STRONG><a name="[1c6]"></a>rtos::Thread::terminate()</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\thread.o(.text._ZN4rtos6Thread9terminateEv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[1c8]"></a>rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, .\build\cellulardevice.o(.text._ZN4rtos6ThreadC2E12osPriority_tjPhPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*) &rArr; rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object()
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::constructor(osPriority_t, unsigned int, unsigned char*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
</UL>

<P><STRONG><a name="[6a]"></a>rtos::Thread::~Thread__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = rtos::Thread::~Thread__deallocating() &rArr; operator delete(void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete(void*)
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.rodata._ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[1ca]"></a>rtos::Thread::~Thread()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[](void*)
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[69]"></a>rtos::Thread::~Thread__sub_object()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, .\build\thread.o(.text._ZN4rtos6ThreadD2Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rtos::Thread::~Thread__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> thread.o(.rodata._ZTVN4rtos6ThreadE)
</UL>
<P><STRONG><a name="[1cc]"></a>rtos::Semaphore::constructor(int, unsigned short)</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, .\build\semaphore.o(.text._ZN4rtos9Semaphore11constructorEit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
</UL>
<BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::Semaphore(int)
</UL>

<P><STRONG><a name="[1c5]"></a>rtos::Semaphore::release()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9Semaphore7releaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = rtos::Semaphore::release() &rArr; osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
</UL>

<P><STRONG><a name="[1c9]"></a>rtos::Semaphore::Semaphore(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreC2Ei))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)
</UL>

<P><STRONG><a name="[310]"></a>rtos::Semaphore::Semaphore__sub_object(int)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreC2Ei), UNUSED)

<P><STRONG><a name="[1cb]"></a>rtos::Semaphore::~Semaphore()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreD2Ev), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
</UL>

<P><STRONG><a name="[311]"></a>rtos::Semaphore::~Semaphore__sub_object()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\semaphore.o(.text._ZN4rtos9SemaphoreD2Ev), UNUSED)

<P><STRONG><a name="[5b]"></a>DirectSerial::poll(short) const</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZNK12DirectSerial4pollEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DirectSerial::poll(short) const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[1d2]"></a>SingletonPtr&lang;rtos::Mutex&rang;::get() const</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\nsapi_dns.o(.text._ZNK12SingletonPtrIN4rtos5MutexEE3getEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::get() const &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(char const*) &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::Mutex()
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void core_util_atomic_store&lang;rtos::Mutex&rang;(rtos::Mutex**, rtos::Mutex*)
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex* core_util_atomic_load&lang;rtos::Mutex&rang;(rtos::Mutex* const*)
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const
</UL>

<P><STRONG><a name="[155]"></a>SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\analogin.o(.text._ZNK12SingletonPtrIN4rtos5MutexEEptEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const &rArr; SingletonPtr&lang;rtos::Mutex&rang;::get() const &rArr; rtos::Mutex::Mutex() &rArr; rtos::Mutex::constructor(char const*) &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::unlock()
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::lock()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FileBase::lookup(char const*, unsigned int)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
</UL>

<P><STRONG><a name="[58]"></a>mbed::FileHandle::is_blocking() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\file.o(.text._ZNK4mbed10FileHandle11is_blockingEv))
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> mbed_retarget.o(.rodata._ZTV12DirectSerial)
</UL>
<P><STRONG><a name="[61]"></a>mbed::FileHandle::poll(short) const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\file.o(.text._ZNK4mbed10FileHandle4pollEs))
<BR>[Address Reference Count : 1]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
</UL>
<P><STRONG><a name="[169]"></a>mbed::TickerDataClock::now() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\arm_hal_fhss_timer.o(.text._ZNK4mbed15TickerDataClock3nowEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed::TickerDataClock::now() const &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::SysTimer(ticker_data_t const*)
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::setup(std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang;)
</UL>

<P><STRONG><a name="[1af]"></a>mbed::TickerDataClock::operator-&rang;() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\systimer.o(.text._ZNK4mbed15TickerDataClockptEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
</UL>

<P><STRONG><a name="[1d7]"></a>mbed::detail::CallbackBase::call_fn() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\asyncop.o(.text._ZNK4mbed6detail12CallbackBase7call_fnEv))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::call() const
</UL>

<P><STRONG><a name="[1d8]"></a>mbed::detail::CallbackBase::control() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\asyncop.o(.text._ZNK4mbed6detail12CallbackBase7controlEv))
<BR><BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator bool() const
</UL>

<P><STRONG><a name="[1d6]"></a>mbed::Callback&lang;void ()&rang;::call() const</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\at_cellularcontext.o(.text._ZNK4mbed8CallbackIFvvEE4callEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mbed::Callback&lang;void ()&rang;::call() const &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator bool() const
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::call_fn() const
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::operator()() const
</UL>

<P><STRONG><a name="[16d]"></a>mbed::Callback&lang;void ()&rang;::operator()() const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\asyncop.o(.text._ZNK4mbed8CallbackIFvvEEclEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed::Callback&lang;void ()&rang;::operator()() const &rArr; mbed::Callback&lang;void ()&rang;::call() const &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::call() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::_thunk(void*)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::handler()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::handler()
</UL>

<P><STRONG><a name="[16c]"></a>mbed::Callback&lang;void ()&rang;::operator bool() const</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, .\build\asyncop.o(.text._ZNK4mbed8CallbackIFvvEEcvbEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::Callback&lang;void ()&rang;::operator bool() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::detail::CallbackBase::control() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::call() const
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::handler()
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::handler()
</UL>

<P><STRONG><a name="[19b]"></a>mbed::internal::timed_predicate_op::wake_condition() const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZNK4mbed8internal18timed_predicate_op14wake_conditionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed::internal::timed_predicate_op::wake_condition() const
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::wake_time_passed() const
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[19f]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::wake_time_set() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_os_timer.o(.text._ZNK4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE13wake_time_setEv))
<BR><BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::sleep_prepared()
</UL>

<P><STRONG><a name="[1b1]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, .\build\systimer.o(.text._ZNK4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE14_elapsed_ticksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const &rArr; mbed::TickerDataClock::now() const &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::now() const
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
</UL>

<P><STRONG><a name="[1d9]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::wake_time_passed() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_os_timer.o(.text._ZNK4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE16wake_time_passedEv))
<BR><BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::timed_predicate_op::wake_condition() const
</UL>

<P><STRONG><a name="[1a9]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::unacknowledged_ticks() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_os_timer.o(.text._ZNK4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE20unacknowledged_ticksEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::acknowledged_ticks()
</UL>

<P><STRONG><a name="[1a8]"></a>mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\systimer.o(.text._ZNK4mbed8internal8SysTimerINSt3__25ratioILx1ELx1000EEELb1EE8get_tickEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const &rArr; core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::OsClock::reported_ticks()
</UL>

<P><STRONG><a name="[1c4]"></a>operator delete[](void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = operator delete[](void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread()
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
</UL>

<P><STRONG><a name="[160]"></a>operator delete(void*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = operator delete(void*) &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__deallocating()
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::~DirectSerial__deallocating()
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::~Thread__deallocating()
</UL>

<P><STRONG><a name="[1c2]"></a>operator new[](unsigned int, std::nothrow_t const&)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZnajRKSt9nothrow_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = operator new[](unsigned int, std::nothrow_t const&) &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
</UL>

<P><STRONG><a name="[14a]"></a>__cxa_guard_acquire</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[14c]"></a>__cxa_guard_release</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__cxa_guard_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __cxa_guard_release &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
</UL>

<P><STRONG><a name="[5e]"></a>__cxa_pure_virtual</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_p.l(cxa_virtual.cpp.o)(.text.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __cxa_pure_virtual &rArr; abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort_message
</UL>
<BR>[Address Reference Count : 2]<UL><LI> filehandle.o(.rodata._ZTVN4mbed10FileHandleE)
<LI> timerevent.o(.rodata._ZTVN4mbed10TimerEventE)
</UL>
<P><STRONG><a name="[85]"></a>__rt_entry</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\mbed_boot_arm_std.o(.text.__rt_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = __rt_entry &rArr; mbed_rtos_start &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[94]"></a>__user_perthread_libspace</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(.text.__user_perthread_libspace))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[82]"></a>__user_setup_stackheap</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.__user_setup_stackheap), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbed_user_setup_stackheap
</UL>

<P><STRONG><a name="[1e1]"></a>_mbed_user_setup_stackheap</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._mbed_user_setup_stackheap), UNUSED, KEPT)
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[7f]"></a>_mutex_acquire</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_acquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_acquire &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[81]"></a>_mutex_free</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_free), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _mutex_free &rArr; free &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Finalize
</UL>

<P><STRONG><a name="[7e]"></a>_mutex_initialize</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _mutex_initialize &rArr; malloc &rArr; malloc_internal$concurrent &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free_internal$concurrent &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[80]"></a>_mutex_release</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(.text._mutex_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free_internal$concurrent
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_fflush
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[1dd]"></a>_platform_post_stackheap_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_lib.o(.text._platform_post_stackheap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _platform_post_stackheap_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[a4]"></a>_sys_close</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_close &rArr; close &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;close
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[cd]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>

<P><STRONG><a name="[a0]"></a>_sys_flen</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_flen))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _sys_flen &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[9e]"></a>_sys_istty</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_istty))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _sys_istty &rArr; isatty &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[ab]"></a>_sys_open</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 880<LI>Call Chain = _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;openflags_to_posix(int)
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_freopen_locked
</UL>

<P><STRONG><a name="[c5]"></a>_sys_seek</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _sys_seek &rArr; lseek &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lseek
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[c6]"></a>_sys_write</STRONG> (Thumb, 288 bytes, Stack size 48 bytes, .\build\mbed_retarget.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = _sys_write &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[2ab]"></a>_ticker_match_interval_passed</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text._ticker_match_interval_passed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ticker_match_interval_passed
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[db]"></a>_ttywrch</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ttywrch))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[1f8]"></a>_wait_us_generic</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _wait_us_generic &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_us_ticker_data
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_inline
</UL>

<P><STRONG><a name="[1fa]"></a>_wait_us_inline</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_inline))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _wait_us_inline &rArr; _wait_us_generic &rArr; ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_ticks
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[1fb]"></a>_wait_us_ticks</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_wait_api_no_rtos.o(.text._wait_us_ticks))
<BR><BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_inline
</UL>

<P><STRONG><a name="[1db]"></a>abort_message</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\libcxx\libcppabi_p.l(abort_message.cpp.o)(.text.abort_message))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = abort_message &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[1fc]"></a>adc_read</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\analogin_device.o(.text.adc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_PollForConversion
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_GetValue
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_read_u16
</UL>

<P><STRONG><a name="[18a]"></a>analogin_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_compat.o(.text.analogin_free))
<BR><BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::~AnalogIn__sub_object()
</UL>

<P><STRONG><a name="[189]"></a>analogin_init</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, .\build\analogin_device.o(.text.analogin_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 816<LI>Call Chain = analogin_init &rArr; pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName, float)
</UL>

<P><STRONG><a name="[187]"></a>analogin_read_u16</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\analogin_api.o(.text.analogin_read_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = analogin_read_u16 &rArr; adc_read &rArr; HAL_ADC_Start &rArr; ADC_Enable &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read_u16()
</UL>

<P><STRONG><a name="[1f0]"></a>close</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.close))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = close &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
</UL>

<P><STRONG><a name="[1f6]"></a>core_util_are_interrupts_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[204]"></a>core_util_atomic_decr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_decr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_decr_u16 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
</UL>

<P><STRONG><a name="[1b0]"></a>core_util_atomic_decr_u32</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_decr_u32))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_decr_u32 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::acknowledge_tick()
</UL>

<P><STRONG><a name="[205]"></a>core_util_atomic_exchange_u8</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_exchange_u8))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_exchange_u8 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[206]"></a>core_util_atomic_flag_test_and_set</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_flag_test_and_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_flag_test_and_set &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[207]"></a>core_util_atomic_incr_u16</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_incr_u16))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_incr_u16 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
</UL>

<P><STRONG><a name="[1da]"></a>core_util_atomic_load_u64</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, .\build\mbed_atomic_impl.o(.text.core_util_atomic_load_u64))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = core_util_atomic_load_u64 &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::get_tick() const
</UL>

<P><STRONG><a name="[f6]"></a>core_util_critical_section_enter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = core_util_critical_section_enter &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::CriticalSectionLock()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_exchange_u8
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>

<P><STRONG><a name="[f7]"></a>core_util_critical_section_exit</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_critical.o(.text.core_util_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u32
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::CriticalSectionLock::~CriticalSectionLock()
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_load_u64
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_exchange_u8
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>

<P><STRONG><a name="[1f5]"></a>core_util_is_isr_active</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\mbed_critical.o(.text.core_util_is_isr_active))
<BR><BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[12c]"></a>error</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\mbed_error.o(.text.error))
<BR><BR>[Stack]<UL><LI>Max Depth = 608 + In Cycle
<LI>Call Chain = error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_exchange_u8
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[210]"></a>exit</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text.exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = exit &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fsync
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[211]"></a>fsync</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.fsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fsync &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[198]"></a>get_lp_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_lp_ticker_api.o(.text.get_lp_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::init_os_timer()
</UL>

<P><STRONG><a name="[1ee]"></a>get_uart_index</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.get_uart_index), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
</UL>

<P><STRONG><a name="[180]"></a>get_us_ticker_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.get_us_ticker_data))
<BR><BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::Timeout()
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>

<P><STRONG><a name="[1e8]"></a>gpio_dir</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gpio_dir
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[1e7]"></a>gpio_init</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.gpio_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 680<LI>Call Chain = gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[1b6]"></a>gpio_init_in</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>

<P><STRONG><a name="[217]"></a>gpio_init_in_ex</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_in_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in
</UL>

<P><STRONG><a name="[166]"></a>gpio_init_out</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[218]"></a>gpio_init_out_ex</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_gpio.o(.text.gpio_init_out_ex))
<BR><BR>[Stack]<UL><LI>Max Depth = 712<LI>Call Chain = gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
</UL>

<P><STRONG><a name="[1e9]"></a>gpio_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\gpio_api.o(.text.gpio_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = gpio_mode &rArr; pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_in
</UL>

<P><STRONG><a name="[216]"></a>gpio_set</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\gpio_api.o(.text.gpio_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>

<P><STRONG><a name="[208]"></a>hal_critical_section_enter</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_enter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = hal_critical_section_enter
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
</UL>

<P><STRONG><a name="[209]"></a>hal_critical_section_exit</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_critical_section_api.o(.text.hal_critical_section_exit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
</UL>

<P><STRONG><a name="[21a]"></a>hal_sleep</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\sleep.o(.text.hal_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnterSLEEPMode
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>

<P><STRONG><a name="[fb]"></a>init_16bit_timer</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\build\us_ticker.o(.text.init_16bit_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = init_16bit_timer &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[1ef]"></a>init_uart</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, .\build\serial_api.o(.text.init_uart), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableStopMode
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_EnableClockStopMode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableStopMode
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_DisableClockStopMode
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
</UL>

<P><STRONG><a name="[146]"></a>isatty</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text.isatty))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = isatty &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_crlf(int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
</UL>

<P><STRONG><a name="[6e]"></a>lp_ticker_clear_interrupt</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_clear_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lp_ticker_clear_interrupt &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[6d]"></a>lp_ticker_disable_interrupt</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_disable_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = lp_ticker_disable_interrupt &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_DisableIRQ
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_ClearPendingIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[70]"></a>lp_ticker_fire_interrupt</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lp_ticker_fire_interrupt &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPendingIRQ
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[71]"></a>lp_ticker_free</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\lp_ticker.o(.text.lp_ticker_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = lp_ticker_free &rArr; lp_ticker_disable_interrupt &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[72]"></a>lp_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[6b]"></a>lp_ticker_init</STRONG> (Thumb, 232 bytes, Stack size 112 bytes, .\build\lp_ticker.o(.text.lp_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 896<LI>Call Chain = lp_ticker_init &rArr; lp_ticker_disable_interrupt &rArr; sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Init
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Start
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetVector
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[119]"></a>lp_ticker_irq_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_lp_ticker_api.o(.text.lp_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lp_ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>

<P><STRONG><a name="[6c]"></a>lp_ticker_read</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.lp_ticker_read))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[6f]"></a>lp_ticker_set_interrupt</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, .\build\lp_ticker.o(.text.lp_ticker_set_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 800<LI>Call Chain = lp_ticker_set_interrupt &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_lp_ticker_api.o(.rodata.lp_interface)
</UL>
<P><STRONG><a name="[1f4]"></a>lseek</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lseek &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
</UL>

<P><STRONG><a name="[23c]"></a>main</STRONG> (Thumb, 196 bytes, Stack size 72 bytes, .\build\main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 936<LI>Call Chain = main &rArr; compare_values(unsigned short) &rArr; mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::read_u16()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::Callback__sub_object&lang;void (*)(), 0&rang;(void (*)())
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::operator=(int)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compare_values(unsigned short)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_values(State)
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[129]"></a>mbed_assert_internal</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_assert.o(.text.mbed_assert_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Callback&lang;void ()&rang;::call() const
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::update_and_get_tick()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(char const*)
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[212]"></a>mbed_die</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, .\build\mbed_board.o(.text.mbed_die))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_inline
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
</UL>

<P><STRONG><a name="[1bb]"></a>mbed_error</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, .\build\mbed_error.o(.text.mbed_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 760<LI>Call Chain = mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_exchange_u8
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_halt_system
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_lock_deep_sleep_internal
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[21d]"></a>mbed_error_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_error_hook))
<BR><BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>

<P><STRONG><a name="[25a]"></a>mbed_error_initialize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_error_initialize))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[23f]"></a>mbed_error_printf</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[20e]"></a>mbed_error_puts</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, .\build\mbed_board.o(.text.mbed_error_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mbed_error_puts &rArr; write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_vprintf
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[20d]"></a>mbed_error_vprintf</STRONG> (Thumb, 48 bytes, Stack size 144 bytes, .\build\mbed_board.o(.text.mbed_error_vprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = mbed_error_vprintf &rArr; vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>

<P><STRONG><a name="[90]"></a>mbed_fault_handler</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, .\build\mbed_fault_handler.o(.text.mbed_fault_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbed_fault_handler &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_exchange_u8
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_context_info
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Fault_Handler
</UL>

<P><STRONG><a name="[1ba]"></a>mbed_get_error_in_progress</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_get_error_in_progress))
<BR><BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(char const*)
</UL>

<P><STRONG><a name="[1dc]"></a>mbed_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = mbed_init &rArr; mbed_sdk_init &rArr; SetSysClock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_cpy_nvic
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[259]"></a>mbed_main</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_main))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[dd]"></a>mbed_minimal_formatted_string</STRONG> (Thumb, 1570 bytes, Stack size 96 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;parse_string_to_integer
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_void_pointer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_string
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
</UL>

<P><STRONG><a name="[241]"></a>mbed_mpu_init</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\mbed_mpu_v7m.o(.text.mbed_mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mbed_mpu_init &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_SetRegion
<LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ARM_MPU_ClrRegion
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[244]"></a>mbed_rtos_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_rtos_rtx.o(.text.mbed_rtos_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mbed_rtos_init &rArr; osKernelInitialize &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[253]"></a>mbed_rtos_init_singleton_mutex</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\mbed_rtos_rtx.o(.text.mbed_rtos_init_singleton_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = mbed_rtos_init_singleton_mutex &rArr; osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[1de]"></a>mbed_rtos_start</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\mbed_rtos_rtx.o(.text.mbed_rtos_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 768<LI>Call Chain = mbed_rtos_start &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[243]"></a>mbed_sdk_init</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(.text.mbed_sdk_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = mbed_sdk_init &rArr; SetSysClock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TargetBSP_Init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSEDriveConfig
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[30]"></a>mbed_start</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 944 + Unknown Stack Size
<LI>Call Chain = mbed_start &rArr; main &rArr; compare_values(unsigned short) &rArr; mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_toolchain_init
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_tfm_init
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init_singleton_mutex
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_main
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_initialize
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtos_rtx.o(.text.mbed_rtos_start)
</UL>
<P><STRONG><a name="[257]"></a>mbed_tfm_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_boot.o(.text.mbed_tfm_init))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[258]"></a>mbed_toolchain_init</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(.text.mbed_toolchain_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = mbed_toolchain_init &rArr; __rt_lib_init
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_start
</UL>

<P><STRONG><a name="[1f3]"></a>open</STRONG> (Thumb, 132 bytes, Stack size 40 bytes, .\build\mbed_retarget.o(.text.open))
<BR><BR>[Stack]<UL><LI>Max Depth = 864<LI>Call Chain = open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::FilePath(char const*)
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileName()
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::isFile()
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::exists()
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::file()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::FilePath::fileSystem()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;reserve_filehandle()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_open_errors(int, unsigned int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[25d]"></a>osKernelGetState</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsPrivileged
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;os_kernel_is_active
</UL>

<P><STRONG><a name="[1ec]"></a>osKernelInitialize</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.osKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelInitialize &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelPreInit
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_post_stackheap_init
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init
</UL>

<P><STRONG><a name="[152]"></a>osKernelResume</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.osKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelResume &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[254]"></a>osKernelStart</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.osKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osKernelStart &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[150]"></a>osKernelSuspend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.osKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osKernelSuspend &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_idle_hook()
</UL>

<P><STRONG><a name="[262]"></a>osMessageQueueGet</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerThread
</UL>

<P><STRONG><a name="[265]"></a>osMessageQueuePut</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[148]"></a>osMutexAcquire</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMutexAcquire &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_lock()
</UL>

<P><STRONG><a name="[1be]"></a>osMutexDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osMutexDelete), UNUSED, KEPT)
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMutexDelete &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::~Mutex()
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_free
</UL>

<P><STRONG><a name="[1b9]"></a>osMutexNew</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_init_singleton_mutex
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::constructor(char const*)
</UL>

<P><STRONG><a name="[14e]"></a>osMutexRelease</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;singleton_unlock()
</UL>

<P><STRONG><a name="[1e0]"></a>osRtxErrorNotify</STRONG> (Thumb, 108 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + In Cycle
<LI>Call Chain = osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_initialize
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>

<P><STRONG><a name="[3c]"></a>osRtxIdleThread</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.osRtxIdleThread))
<BR><BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos_idle_loop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osRtxThreadStartup)
</UL>
<P><STRONG><a name="[269]"></a>osRtxKernelErrorNotify</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.osRtxKernelErrorNotify))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxKernelErrorNotify &rArr; osRtxErrorNotify &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxErrorNotify
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[261]"></a>osRtxKernelPreInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.osRtxKernelPreInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[26b]"></a>osRtxMemoryAlloc</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, .\build\rtx_memory.o(.text.osRtxMemoryAlloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxMemoryAlloc
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[26e]"></a>osRtxMemoryFree</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, .\build\rtx_memory.o(.text.osRtxMemoryFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
</UL>

<P><STRONG><a name="[26f]"></a>osRtxMemoryInit</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, .\build\rtx_memory.o(.text.osRtxMemoryInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxMemoryInit
</UL>
<BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemHeadPtr
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemBlockPtr
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[230]"></a>osRtxMemoryPoolAlloc</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolAlloc))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreNew
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexNew
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
</UL>

<P><STRONG><a name="[271]"></a>osRtxMemoryPoolFree</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = osRtxMemoryPoolFree
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[2b1]"></a>osRtxMemoryPoolInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, .\build\rtx_mempool.o(.text.osRtxMemoryPoolInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxMemoryPoolInit
</UL>
<BR>[Called By]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelInitialize
</UL>

<P><STRONG><a name="[276]"></a>osRtxMessageQueueTimerSetup</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.osRtxMessageQueueTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueNew
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerSetup
</UL>

<P><STRONG><a name="[278]"></a>osRtxMutexOwnerRelease</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(.text.osRtxMutexOwnerRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[27a]"></a>osRtxMutexOwnerRestore</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.osRtxMutexOwnerRestore))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
</UL>
<BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[91]"></a>osRtxPendSV_Handler</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.osRtxPendSV_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxPendSV_Handler &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreObject
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageObject
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolObject
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxEventFlagsObject
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[22e]"></a>osRtxPostProcess</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\rtx_system.o(.text.osRtxPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxPostProcess &rArr; isr_queue_put
</UL>
<BR>[Calls]<UL><LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_put
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Called By]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[287]"></a>osRtxThreadDelayTick</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRoot
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexObject
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[281]"></a>osRtxThreadDispatch</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[272]"></a>osRtxThreadListGet</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadListGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListGet
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[293]"></a>osRtxThreadListPut</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadListPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[28b]"></a>osRtxThreadListRemove</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[27b]"></a>osRtxThreadListSort</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadListSort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRestore
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[28c]"></a>osRtxThreadReadyPut</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadReadyPut))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[274]"></a>osRtxThreadRegPtr</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadRegPtr))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[295]"></a>osRtxThreadStartup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadStartup))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxThreadStartup &rArr; svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadNew
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[291]"></a>osRtxThreadSwitch</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadSwitch))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[297]"></a>osRtxThreadWaitEnter</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitEnter))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayInsert
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[273]"></a>osRtxThreadWaitExit</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadWaitExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[92]"></a>osRtxTick_Handler</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.osRtxTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxTick_Handler &rArr; osRtxThreadDelayTick &rArr; osRtxMutexOwnerRestore &rArr; osRtxThreadListSort &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_AcknowledgeIRQ
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadReadyPut
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[4a]"></a>osRtxTimerSetup</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\rtx_timer.o(.text.osRtxTimerSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = osRtxTimerSetup &rArr; osRtxMessageQueueTimerSetup &rArr; svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[49]"></a>osRtxTimerThread</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\rtx_timer.o(.text.osRtxTimerThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = osRtxTimerThread &rArr; osMessageQueueGet &rArr; isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_lib.o(.rodata)
</UL>
<P><STRONG><a name="[1cf]"></a>osSemaphoreDelete</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreDelete), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::~Semaphore()
</UL>

<P><STRONG><a name="[1cd]"></a>osSemaphoreNew</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::constructor(int, unsigned short)
</UL>

<P><STRONG><a name="[1ce]"></a>osSemaphoreRelease</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.osSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osSemaphoreRelease &rArr; isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Semaphore::release()
</UL>

<P><STRONG><a name="[47]"></a>osThreadExit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osThreadExit &rArr; EvrRtxThreadError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[ed]"></a>osThreadGetId</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osThreadGetId &rArr; svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[1c3]"></a>osThreadNew</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, .\build\rtx_thread.o(.text.osThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = osThreadNew &rArr; EvrRtxThreadError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::start(mbed::Callback&lang;void ()&rang;)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_rtos_start
</UL>

<P><STRONG><a name="[1c7]"></a>osThreadTerminate</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osThreadTerminate), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsIrqMasked
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IsException
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::terminate()
</UL>

<P><STRONG><a name="[1e3]"></a>pin_function</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, .\build\pinmap.o(.text.pin_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_set
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
</UL>

<P><STRONG><a name="[1e4]"></a>pin_mode</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\pinmap.o(.text.pin_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = pin_mode &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_GPIO_Clock
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_GetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_analogin_init_direct
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
</UL>

<P><STRONG><a name="[200]"></a>pinmap_find_function</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_function))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pinmap_find_function
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[2a9]"></a>pinmap_find_peripheral</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_find_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
</UL>

<P><STRONG><a name="[2a8]"></a>pinmap_merge</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_merge), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[1ff]"></a>pinmap_peripheral</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_pinmap_common.o(.text.pinmap_peripheral))
<BR><BR>[Stack]<UL><LI>Max Depth = 784<LI>Call Chain = pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_peripheral
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[240]"></a>print_context_info</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, .\build\mbed_fault_handler.o(.text.print_context_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 576<LI>Call Chain = print_context_info &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_fault_handler
</UL>

<P><STRONG><a name="[268]"></a>rtos_idle_loop</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text.rtos_idle_loop))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxIdleThread
</UL>

<P><STRONG><a name="[15f]"></a>serial_baud</STRONG> (Thumb, 160 bytes, Stack size 120 bytes, .\build\serial_api.o(.text.serial_baud), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(serial_pinmap_t const&, int)
</UL>

<P><STRONG><a name="[15a]"></a>serial_getc</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, .\build\serial_device.o(.text.serial_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = serial_getc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_readable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::read(void*, unsigned int)
</UL>

<P><STRONG><a name="[2ac]"></a>serial_init</STRONG> (Thumb, 124 bytes, Stack size 64 bytes, .\build\serial_api.o(.text.serial_init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_peripheral
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_find_function
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinmap_merge
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_serial_init_direct
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init_direct
</UL>

<P><STRONG><a name="[15e]"></a>serial_init_direct</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\static_pinmap.o(.text.serial_init_direct), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial(serial_pinmap_t const&, int)
</UL>

<P><STRONG><a name="[15b]"></a>serial_putc</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\serial_device.o(.text.serial_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = serial_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_writable
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::write(void const*, unsigned int)
</UL>

<P><STRONG><a name="[1d0]"></a>serial_readable</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_readable))
<BR><BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_getc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[1d1]"></a>serial_writable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\serial_api.o(.text.serial_writable))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_putc
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::poll(short) const
</UL>

<P><STRONG><a name="[16f]"></a>sleep_manager_lock_deep_sleep_internal</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_lock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_incr_u16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;)
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerBase::attach_us(mbed::Callback&lang;void ()&rang;, unsigned long long)
</UL>

<P><STRONG><a name="[159]"></a>sleep_manager_sleep_auto</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_sleep_auto))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_sleep
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep()
</UL>

<P><STRONG><a name="[11a]"></a>sleep_manager_unlock_deep_sleep_internal</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, .\build\mbed_power_mgmt.o(.text.sleep_manager_unlock_deep_sleep_internal))
<BR><BR>[Stack]<UL><LI>Max Depth = 776<LI>Call Chain = sleep_manager_unlock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_decr_u16
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_IRQHandler
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_wake()
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TimeoutBase::handler()
</UL>

<P><STRONG><a name="[17c]"></a>ticker_insert_event_us</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.ticker_insert_event_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_event
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int)
</UL>

<P><STRONG><a name="[7d]"></a>ticker_irq_handler</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ticker_irq_handler &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Address Reference Count : 2]<UL><LI> mbed_lp_ticker_api.o(.data.irq_handler)
<LI> mbed_us_ticker_api.o(.data.irq_handler)
</UL>
<P><STRONG><a name="[1f9]"></a>ticker_read</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.ticker_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = ticker_read &rArr; ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wait_us_generic
</UL>

<P><STRONG><a name="[1d5]"></a>ticker_read_us</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_read_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ticker_read_us &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::now() const
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read
</UL>

<P><STRONG><a name="[17d]"></a>ticker_remove_event</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_remove_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::remove_event(ticker_event_s*)
</UL>

<P><STRONG><a name="[17b]"></a>ticker_set_handler</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.ticker_set_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ticker_set_handler &rArr; initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_handler
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::TickerDataClock::set_handler(void (*)(unsigned int))
</UL>

<P><STRONG><a name="[2c]"></a>timer_irq_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\us_ticker.o(.text.timer_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = timer_irq_handler &rArr; us_ticker_irq_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_irq_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> us_ticker.o(.text.__NVIC_SetVector)
</UL>
<P><STRONG><a name="[76]"></a>us_ticker_clear_interrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_clear_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[75]"></a>us_ticker_disable_interrupt</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_disable_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[78]"></a>us_ticker_fire_interrupt</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, .\build\us_ticker.o(.text.us_ticker_fire_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = us_ticker_fire_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_CC1
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[7a]"></a>us_ticker_get_info</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_get_info))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[73]"></a>us_ticker_init</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, .\build\us_ticker.o(.text.us_ticker_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = us_ticker_init &rArr; HAL_TIM_OC_Start &rArr; TIM_CCxChannelCmd
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[2b9]"></a>us_ticker_irq_handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_us_ticker_api.o(.text.us_ticker_irq_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = us_ticker_irq_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_irq_handler
</UL>

<P><STRONG><a name="[74]"></a>us_ticker_read</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_read))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[77]"></a>us_ticker_set_interrupt</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.us_ticker_set_interrupt))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[1f7]"></a>write</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text.write))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = write &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[e3]"></a>__aeabi_uidiv</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_sdivfast.o)(.text_divfast))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_GetPinMode
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LPTIM_WaitForFlag
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_elapsed_ticks() const
</UL>

<P><STRONG><a name="[312]"></a>__aeabi_idiv</STRONG> (Thumb, 434 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(aeabi_sdivfast.o)(.text_divfast), UNUSED)

<P><STRONG><a name="[24e]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dcmp.o)(i._dgeq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2bc]"></a>_dgeq</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dcmp.o)(i._dgeq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[24d]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dcmp.o)(i._dleq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
</UL>

<P><STRONG><a name="[2be]"></a>_dleq</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dcmp.o)(i._dleq), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[a7]"></a>_fputc$unlocked</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fputc.o)(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fputc$unlocked &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>

<P><STRONG><a name="[2bd]"></a>_dcmpge</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dgef.o)(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
</UL>

<P><STRONG><a name="[313]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dlef.o)(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[2bf]"></a>_dcmple</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(dlef.o)(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_InfNaN
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1fe]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\analogin_device.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_read
</UL>

<P><STRONG><a name="[1e2]"></a>_analogin_init_direct</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, .\build\analogin_device.o(.text._analogin_init_direct))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = _analogin_init_direct &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_Start
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADCEx_Calibration_GetValue
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogin_init
</UL>

<P><STRONG><a name="[1b4]"></a>gpio_read(gpio_t*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\busin.o(.text._ZL9gpio_readP6gpio_t))
<BR><BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::read()
</UL>

<P><STRONG><a name="[164]"></a>gpio_write(gpio_t*, int)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZL10gpio_writeP6gpio_ti))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::write(int)
</UL>

<P><STRONG><a name="[162]"></a>gpio_read(gpio_t*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\busout.o(.text._ZL9gpio_readP6gpio_t))
<BR><BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::read()
</UL>

<P><STRONG><a name="[215]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\gpio_api.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
</UL>

<P><STRONG><a name="[2b]"></a>LPTIM_IRQHandler</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\lp_ticker.o(.text.LPTIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 824<LI>Call Chain = LPTIM_IRQHandler &rArr; lp_ticker_set_interrupt &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_unlock_deep_sleep_internal
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_read
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_irq_handler
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lp_ticker.o(.text.__NVIC_SetVector)
</UL>
<P><STRONG><a name="[237]"></a>__NVIC_ClearPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.__NVIC_ClearPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_clear_interrupt
</UL>

<P><STRONG><a name="[238]"></a>__NVIC_DisableIRQ</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.__NVIC_DisableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_disable_interrupt
</UL>

<P><STRONG><a name="[23a]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_set_interrupt
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[239]"></a>__NVIC_SetPendingIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.__NVIC_SetPendingIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[23b]"></a>__NVIC_SetVector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\lp_ticker.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lp_ticker_init
</UL>

<P><STRONG><a name="[23d]"></a>gpio_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_board.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
</UL>

<P><STRONG><a name="[242]"></a>mbed_cpy_nvic</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_boot.o(.text.mbed_cpy_nvic))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_cpy_nvic
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_init
</UL>

<P><STRONG><a name="[1df]"></a>os_kernel_is_active</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\mbed_boot_arm_std.o(.text.os_kernel_is_active))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perthread_libspace
</UL>

<P><STRONG><a name="[219]"></a>are_interrupts_enabled</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\mbed_critical_section_api.o(.text.are_interrupts_enabled))
<BR><BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_exit
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_critical_section_enter
</UL>

<P><STRONG><a name="[20b]"></a>handle_error</STRONG> (Thumb, 152 bytes, Stack size 72 bytes, .\build\mbed_error.o(.text.handle_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = handle_error &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_exit
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_hook
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_is_hw_fault
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[23e]"></a>mbed_error_is_handler</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_error.o(.text.mbed_error_is_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = mbed_error_is_handler
</UL>
<BR>[Calls]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_is_hw_fault
</UL>
<BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[21c]"></a>mbed_error_is_hw_fault</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_error_is_hw_fault))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_is_handler
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;handle_error
</UL>

<P><STRONG><a name="[20f]"></a>mbed_halt_system</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.mbed_halt_system))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_critical_section_enter
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_atomic_flag_test_and_set
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_is_isr_active
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_die
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_util_are_interrupts_enabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[2aa]"></a>name_or_unnamed</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_error.o(.text.name_or_unnamed))
<BR><BR>[Called By]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_error_report
</UL>

<P><STRONG><a name="[20c]"></a>print_error_report</STRONG> (Thumb, 280 bytes, Stack size 40 bytes, .\build\mbed_error.o(.text.print_error_report))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = print_error_report &rArr; mbed_error_printf &rArr; mbed_error_vprintf &rArr; vsnprintf &rArr; mbed_minimal_formatted_string &rArr; mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_puts
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_printf
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;name_or_unnamed
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error_is_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
</UL>

<P><STRONG><a name="[1e6]"></a>_gpio_init_in</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, .\build\mbed_gpio.o(.text._gpio_init_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 696<LI>Call Chain = _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_in_ex
</UL>

<P><STRONG><a name="[1ea]"></a>_gpio_init_out</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, .\build\mbed_gpio.o(.text._gpio_init_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 704<LI>Call Chain = _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_dir
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_mode
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_write
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gpio_init_out_ex
</UL>

<P><STRONG><a name="[1eb]"></a>gpio_write</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_gpio.o(.text.gpio_write))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gpio_init_out
</UL>

<P><STRONG><a name="[251]"></a>ARM_MPU_ClrRegion</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_mpu_v7m.o(.text.ARM_MPU_ClrRegion))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
</UL>

<P><STRONG><a name="[252]"></a>ARM_MPU_SetRegion</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\mbed_mpu_v7m.o(.text.ARM_MPU_SetRegion))
<BR><BR>[Called By]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_mpu_init
</UL>

<P><STRONG><a name="[158]"></a>sleep()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\mbed_os_timer.o(.text._ZL5sleepv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = sleep() &rArr; sleep_manager_sleep_auto &rArr; hal_sleep &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sleep_manager_sleep_auto
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&)
</UL>

<P><STRONG><a name="[255]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_overrides.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[11b]"></a>LSEDriveConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_overrides.o(.text.LSEDriveConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LSEDriveConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_PWR_EnableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_sdk_init
</UL>

<P><STRONG><a name="[248]"></a>mbed_minimal_formatted_string_double</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string_double))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = mbed_minimal_formatted_string_double &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2d
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_l2d
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2lz
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpge
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[245]"></a>mbed_minimal_formatted_string_integer</STRONG> (Thumb, 356 bytes, Stack size 88 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_void_pointer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[24a]"></a>mbed_minimal_formatted_string_string</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string_string))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = mbed_minimal_formatted_string_string &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[249]"></a>mbed_minimal_formatted_string_void_pointer</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_formatted_string_void_pointer))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = mbed_minimal_formatted_string_void_pointer &rArr; mbed_minimal_formatted_string_integer &rArr; mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_putchar
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[246]"></a>mbed_minimal_putchar</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\mbed_printf_implementation.o(.text.mbed_minimal_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = mbed_minimal_putchar &rArr; fputc &rArr; _mutex_release &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_void_pointer
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_string
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_integer
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string_double
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[247]"></a>parse_string_to_integer</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, .\build\mbed_printf_implementation.o(.text.parse_string_to_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = parse_string_to_integer
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_minimal_formatted_string
</UL>

<P><STRONG><a name="[141]"></a>get_console(int)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL11get_consolei))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;default_console()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_target_override_console(int)
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_override_console(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::mbed_file_handle(int)
</UL>

<P><STRONG><a name="[145]"></a>convert_crlf(int)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL12convert_crlfi))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = convert_crlf(int) &rArr; isatty &rArr; mbed::mbed_file_handle(int) &rArr; get_console(int) &rArr; default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isatty
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[147]"></a>singleton_lock()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = singleton_lock() &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[144]"></a>default_console()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL15default_consolev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = default_console() &rArr; __cxa_guard_acquire &rArr; singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DirectSerial::DirectSerial__sub_object(serial_pinmap_t const&, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_console(int)
</UL>

<P><STRONG><a name="[14d]"></a>singleton_unlock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_release
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>

<P><STRONG><a name="[153]"></a>handle_open_errors(int, unsigned int)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\mbed_retarget.o(.text._ZL18handle_open_errorsij))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = handle_open_errors(int, unsigned int) &rArr; __aeabi_errno_addr &rArr; __user_perthread_libspace &rArr; os_kernel_is_active &rArr; osKernelGetState &rArr; svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[1f2]"></a>openflags_to_posix(int)</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, .\build\mbed_retarget.o(.text._ZL18openflags_to_posixi))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[154]"></a>reserve_filehandle()</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, .\build\mbed_retarget.o(.text._ZL18reserve_filehandlev))
<BR><BR>[Stack]<UL><LI>Max Depth = 792<LI>Call Chain = reserve_filehandle() &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::operator-&rang;() const
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::unlock()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Mutex::lock()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;open
</UL>

<P><STRONG><a name="[2ba]"></a>error_msg</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, .\build\mbed_rtx_handlers.o(.text.error_msg))
<BR><BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trap_rtx_error
</UL>

<P><STRONG><a name="[ee]"></a>thread_terminate_hook</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\mbed_rtx_handlers.o(.text.thread_terminate_hook))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = thread_terminate_hook
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadTerminate
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadExit
</UL>

<P><STRONG><a name="[e7]"></a>trap_rtx_error</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, .\build\mbed_rtx_handlers.o(.text.trap_rtx_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_get_error_in_progress
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_msg
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
</UL>

<P><STRONG><a name="[128]"></a>__NVIC_EnableIRQ(IRQn_Type)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL16__NVIC_EnableIRQ9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[127]"></a>__NVIC_GetVector(IRQn_Type)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL16__NVIC_GetVector9IRQn_Type))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[126]"></a>__NVIC_SetVector(IRQn_Type, unsigned int)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL16__NVIC_SetVector9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[7c]"></a>default_idle_hook()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\mbed_rtx_idle.o(.text._ZL17default_idle_hookv))
<BR><BR>[Stack]<UL><LI>Max Depth = 960<LI>Call Chain = default_idle_hook() &rArr; mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*) &rArr; mbed::internal::do_timed_sleep_absolute(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;, bool (*)(void*), void*) &rArr; void mbed::internal::do_sleep_operation&lang;mbed::internal::timed_predicate_op&rang;(mbed::internal::timed_predicate_op&) &rArr; mbed::internal::timed_predicate_op::sleep_prepare() &rArr; mbed::internal::OsClock::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::OsClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::set_wake_time(std::__2::chrono::time_point&lang;mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;, std::__2::chrono::duration&lang;unsigned long long, std::__2::ratio&lang;1ll, 1000ll&rang; &rang; &rang;) &rArr; sleep_manager_lock_deep_sleep_internal &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::internal::do_timed_sleep_relative_to_acknowledged_ticks(std::__2::chrono::duration&lang;unsigned int, std::__2::ratio&lang;1ll, 1000ll&rang; &rang;, bool (*)(void*), void*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.data._ZL14idle_hook_fptr)
</UL>
<P><STRONG><a name="[125]"></a>__NVIC_SetPriority(IRQn_Type, unsigned int)</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL18__NVIC_SetPriority9IRQn_Typej))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
</UL>

<P><STRONG><a name="[27]"></a>rtos_event_pending(void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\mbed_rtx_idle.o(.text._ZL18rtos_event_pendingPv))
<BR>[Address Reference Count : 1]<UL><LI> mbed_rtx_idle.o(.text._ZL17default_idle_hookv)
</UL>
<P><STRONG><a name="[201]"></a>compute_tick_round_up</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.compute_tick_round_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = compute_tick_round_up &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>

<P><STRONG><a name="[226]"></a>exact_log2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(.text.exact_log2))
<BR><BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[213]"></a>gcd</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\mbed_ticker_api.o(.text.gcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = gcd
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[225]"></a>initialize</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.initialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = initialize &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_error
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gcd
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exact_log2
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[229]"></a>insert_event</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, .\build\mbed_ticker_api.o(.text.insert_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
</UL>

<P><STRONG><a name="[228]"></a>schedule_interrupt</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, .\build\mbed_ticker_api.o(.text.schedule_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ticker_match_interval_passed
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;update_present_time
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;compute_tick_round_up
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_remove_event
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;insert_event
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[2b8]"></a>set_handler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, .\build\mbed_ticker_api.o(.text.set_handler))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_set_handler
</UL>

<P><STRONG><a name="[227]"></a>update_present_time</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, .\build\mbed_ticker_api.o(.text.update_present_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lmul
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_read_us
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_irq_handler
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ticker_insert_event_us
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_interrupt
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initialize
</UL>

<P><STRONG><a name="[79]"></a>block_us_ticker_free</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\mbed_us_ticker_api.o(.text.block_us_ticker_free))
<BR>[Address Reference Count : 1]<UL><LI> mbed_us_ticker_api.o(.rodata.us_interface)
</UL>
<P><STRONG><a name="[149]"></a>singleton_lock()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\nsapi_dns.o(.text._ZL14singleton_lockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = singleton_lock() &rArr; osMutexAcquire &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[14f]"></a>singleton_unlock()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\nsapi_dns.o(.text._ZL16singleton_unlockv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = singleton_unlock() &rArr; osMutexRelease &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SingletonPtr&lang;rtos::Mutex&rang;::get() const
</UL>

<P><STRONG><a name="[118]"></a>LL_GPIO_GetPinMode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.LL_GPIO_GetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_GetPinMode
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
</UL>

<P><STRONG><a name="[2af]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[2ae]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Called By]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_SetAFPin
</UL>

<P><STRONG><a name="[2a5]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2a6]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2ad]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Called By]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stm_pin_PullConfig
</UL>

<P><STRONG><a name="[2a3]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, .\build\pinmap.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2a7]"></a>stm_pin_PullConfig</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.stm_pin_PullConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm_pin_PullConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[2a4]"></a>stm_pin_SetAFPin</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, .\build\pinmap.o(.text.stm_pin_SetAFPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = stm_pin_SetAFPin
</UL>
<BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
</UL>

<P><STRONG><a name="[114]"></a>ClrPendSV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.ClrPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>

<P><STRONG><a name="[2b2]"></a>GetKernelSleepTime</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.GetKernelSleepTime))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[113]"></a>GetPendSV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.GetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
</UL>

<P><STRONG><a name="[25e]"></a>IsException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[25f]"></a>IsIrqMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelSuspend
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelResume
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelStart
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelInitialize
</UL>

<P><STRONG><a name="[260]"></a>IsPrivileged</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.IsPrivileged))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>

<P><STRONG><a name="[111]"></a>KernelBlock</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.KernelBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = KernelBlock &rArr; OS_Tick_Disable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Disable
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetPendSV
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ClrPendSV
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelSuspend
</UL>

<P><STRONG><a name="[115]"></a>KernelUnblock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.KernelUnblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = KernelUnblock &rArr; OS_Tick_Enable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPendSV
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelResume
</UL>

<P><STRONG><a name="[2b3]"></a>SVC_Setup</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.SVC_Setup))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelStart
</UL>

<P><STRONG><a name="[116]"></a>SetPendSV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
</UL>

<P><STRONG><a name="[2b0]"></a>osRtxKernelState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_kernel.o(.text.osRtxKernelState))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxKernelGetState
</UL>

<P><STRONG><a name="[31]"></a>svcRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxKernelGetState
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelState
</UL>
<BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osKernelGetState
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelGetState)
</UL>
<P><STRONG><a name="[32]"></a>svcRtxKernelInitialize</STRONG> (Thumb, 320 bytes, Stack size 24 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelInitialize))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxKernelInitialize &rArr; EvrRtxKernelError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelInitialize)
</UL>
<P><STRONG><a name="[33]"></a>svcRtxKernelResume</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = svcRtxKernelResume &rArr; KernelUnblock &rArr; OS_Tick_Enable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelUnblock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKernelSleepTime
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelResume)
</UL>
<P><STRONG><a name="[34]"></a>svcRtxKernelStart</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = svcRtxKernelStart &rArr; OS_Tick_Enable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::start_tick() &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::_schedule_tick() &rArr; mbed::TimerEvent::insert_absolute(std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;) &rArr; mbed::TickerDataClock::insert_event(ticker_event_s*, std::__2::chrono::time_point&lang;mbed::TickerDataClock, std::__2::chrono::duration&lang;long long, std::__2::ratio&lang;1ll, 1000000ll&rang; &rang; &rang;, unsigned int) &rArr; ticker_insert_event_us &rArr; insert_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Setup
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_GetIRQn
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Tick_Enable
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Setup
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelStart)
</UL>
<P><STRONG><a name="[35]"></a>svcRtxKernelSuspend</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\rtx_kernel.o(.text.svcRtxKernelSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = svcRtxKernelSuspend &rArr; KernelBlock &rArr; OS_Tick_Disable &rArr; mbed::internal::SysTimer&lang;std::__2::ratio&lang;1ll, 1000ll&rang;, true&rang;::cancel_tick() &rArr; mbed::TimerEvent::remove() &rArr; mbed::TickerDataClock::remove_event(ticker_event_s*) &rArr; ticker_remove_event &rArr; schedule_interrupt &rArr; update_present_time &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxKernelError
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KernelBlock
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetKernelSleepTime
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_kernel.o(.text.osKernelSuspend)
</UL>
<P><STRONG><a name="[26c]"></a>MemBlockPtr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, .\build\rtx_memory.o(.text.MemBlockPtr))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[26d]"></a>MemHeadPtr</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_memory.o(.text.MemHeadPtr))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryInit
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>

<P><STRONG><a name="[263]"></a>IsException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[264]"></a>IsIrqMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22c]"></a>MessageQueueGet</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.MessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueGet
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[275]"></a>MessageQueuePut</STRONG> (Thumb, 96 bytes, Stack size 20 bytes, .\build\rtx_msgqueue.o(.text.MessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MessageQueuePut
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[270]"></a>MessageQueueRemove</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\rtx_msgqueue.o(.text.MessageQueueRemove))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MessageQueueRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
</UL>

<P><STRONG><a name="[22a]"></a>isrRtxMessageQueueGet</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.isrRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxMessageQueueGet &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueueGet
</UL>

<P><STRONG><a name="[22f]"></a>isrRtxMessageQueuePut</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.isrRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
</UL>

<P><STRONG><a name="[22b]"></a>osRtxMessageQueueId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.osRtxMessageQueueId))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[45]"></a>osRtxMessageQueuePostProcess</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.osRtxMessageQueuePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = osRtxMessageQueuePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.svcRtxMessageQueueNew)
</UL>
<P><STRONG><a name="[22d]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueuePostProcess
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueuePut
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxMessageQueueGet
</UL>

<P><STRONG><a name="[2b4]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_msgqueue.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueuePut
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMessageQueueGet
</UL>

<P><STRONG><a name="[36]"></a>svcRtxMessageQueueGet</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxMessageQueueGet &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueRemove
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueueGet
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueueGet)
</UL>
<P><STRONG><a name="[277]"></a>svcRtxMessageQueueNew</STRONG> (Thumb, 516 bytes, Stack size 48 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueueNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMessageQueueNew &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolInit
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueTimerSetup
</UL>

<P><STRONG><a name="[37]"></a>svcRtxMessageQueuePut</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, .\build\rtx_msgqueue.o(.text.svcRtxMessageQueuePut))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = svcRtxMessageQueuePut &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMessageQueueError
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadRegPtr
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMessageQueueId
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MessageQueuePut
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_msgqueue.o(.text.osMessageQueuePut)
</UL>
<P><STRONG><a name="[266]"></a>IsException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[267]"></a>IsIrqMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexRelease
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexAcquire
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexNew
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMutexDelete
</UL>

<P><STRONG><a name="[2b5]"></a>osRtxMutexId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.osRtxMutexId))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[279]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexDelete
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[2b6]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_mutex.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexRelease
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxMutexAcquire
</UL>

<P><STRONG><a name="[38]"></a>svcRtxMutexAcquire</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexAcquire))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = svcRtxMutexAcquire &rArr; osRtxThreadWaitEnter &rArr; osRtxThreadDelayInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexAcquire)
</UL>
<P><STRONG><a name="[39]"></a>svcRtxMutexDelete</STRONG> (Thumb, 212 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexDelete)
</UL>
<P><STRONG><a name="[3a]"></a>svcRtxMutexNew</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = svcRtxMutexNew &rArr; EvrRtxMutexError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexNew)
</UL>
<P><STRONG><a name="[3b]"></a>svcRtxMutexRelease</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, .\build\rtx_mutex.o(.text.svcRtxMutexRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxMutexRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxMutexError
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexId
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_mutex.o(.text.osMutexRelease)
</UL>
<P><STRONG><a name="[29f]"></a>IsException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[2a0]"></a>IsIrqMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreNew
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreDelete
</UL>

<P><STRONG><a name="[284]"></a>SemaphoreTokenDecrement</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.SemaphoreTokenDecrement))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
</UL>

<P><STRONG><a name="[233]"></a>SemaphoreTokenIncrement</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.SemaphoreTokenIncrement))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[231]"></a>isrRtxSemaphoreRelease</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.isrRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = isrRtxSemaphoreRelease &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osSemaphoreRelease
</UL>

<P><STRONG><a name="[234]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphorePostProcess
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[232]"></a>osRtxSemaphoreId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_semaphore.o(.text.osRtxSemaphoreId))
<BR><BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreRelease
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxSemaphoreDelete
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isrRtxSemaphoreRelease
</UL>

<P><STRONG><a name="[46]"></a>osRtxSemaphorePostProcess</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\rtx_semaphore.o(.text.osRtxSemaphorePostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxSemaphorePostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenDecrement
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.svcRtxSemaphoreNew)
</UL>
<P><STRONG><a name="[3e]"></a>svcRtxSemaphoreDelete</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxSemaphoreDelete &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreDelete)
</UL>
<P><STRONG><a name="[3f]"></a>svcRtxSemaphoreNew</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = svcRtxSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreNew)
</UL>
<P><STRONG><a name="[40]"></a>svcRtxSemaphoreRelease</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, .\build\rtx_semaphore.o(.text.svcRtxSemaphoreRelease))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = svcRtxSemaphoreRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxSemaphoreError
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxSemaphoreId
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SemaphoreTokenIncrement
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_semaphore.o(.text.osSemaphoreRelease)
</UL>
<P><STRONG><a name="[283]"></a>SetPendSV</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.SetPendSV))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[235]"></a>isr_queue_get</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, .\build\rtx_system.o(.text.isr_queue_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isr_queue_get
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxObject
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[282]"></a>isr_queue_put</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, .\build\rtx_system.o(.text.isr_queue_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = isr_queue_put
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPostProcess
</UL>

<P><STRONG><a name="[27e]"></a>osRtxEventFlagsObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxEventFlagsObject))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[29a]"></a>osRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTick_Handler
</UL>

<P><STRONG><a name="[280]"></a>osRtxMemoryPoolObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxMemoryPoolObject))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[27c]"></a>osRtxMessageObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxMessageObject))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[236]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_queue_get
</UL>

<P><STRONG><a name="[27f]"></a>osRtxSemaphoreObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxSemaphoreObject))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[27d]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_system.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxPendSV_Handler
</UL>

<P><STRONG><a name="[2a1]"></a>IsException</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.IsException))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[2a2]"></a>IsIrqMasked</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.IsIrqMasked))
<BR><BR>[Called By]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadNew
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadTerminate
</UL>

<P><STRONG><a name="[294]"></a>ThreadFlagsCheck</STRONG> (Thumb, 100 bytes, Stack size 20 bytes, .\build\rtx_thread.o(.text.ThreadFlagsCheck))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ThreadFlagsCheck
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadPostProcess
</UL>

<P><STRONG><a name="[28f]"></a>osRtxKernelGetState</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxKernelGetState))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[28a]"></a>osRtxMutexObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxMutexObject))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[289]"></a>osRtxObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxObject))
<BR><BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListSort
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[285]"></a>osRtxThreadBlock</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadBlock
</UL>
<BR>[Calls]<UL><LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadObject
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>

<P><STRONG><a name="[298]"></a>osRtxThreadDelayInsert</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = osRtxThreadDelayInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[299]"></a>osRtxThreadDelayRemove</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadDelayRemove))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>

<P><STRONG><a name="[28d]"></a>osRtxThreadDestroy</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadDestroy))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = osRtxThreadDestroy &rArr; osRtxThreadFree &rArr; osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadFree
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[28e]"></a>osRtxThreadFree</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = osRtxThreadFree &rArr; osRtxMemoryFree
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
</UL>

<P><STRONG><a name="[290]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadGetId
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitEnter
</UL>

<P><STRONG><a name="[296]"></a>osRtxThreadId</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadId))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>

<P><STRONG><a name="[292]"></a>osRtxThreadJoinWakeup</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadJoinWakeup))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadJoinWakeup &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[288]"></a>osRtxThreadListRoot</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadListRoot))
<BR><BR>[Called By]<UL><LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayTick
</UL>

<P><STRONG><a name="[286]"></a>osRtxThreadObject</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadObject))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadBlock
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListPut
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>

<P><STRONG><a name="[48]"></a>osRtxThreadPostProcess</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.osRtxThreadPostProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = osRtxThreadPostProcess &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ThreadFlagsCheck
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadWaitExit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.svcRtxThreadNew)
</UL>
<P><STRONG><a name="[2b7]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_thread.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadTerminate
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;svcRtxThreadExit
</UL>

<P><STRONG><a name="[41]"></a>svcRtxThreadExit</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.svcRtxThreadExit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadExit &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadExit)
</UL>
<P><STRONG><a name="[42]"></a>svcRtxThreadGetId</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, .\build\rtx_thread.o(.text.svcRtxThreadGetId))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = svcRtxThreadGetId
</UL>
<BR>[Calls]<UL><LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osThreadGetId
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadGetId)
</UL>
<P><STRONG><a name="[43]"></a>svcRtxThreadNew</STRONG> (Thumb, 564 bytes, Stack size 48 bytes, .\build\rtx_thread.o(.text.svcRtxThreadNew))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = svcRtxThreadNew &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolFree
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryPoolAlloc
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryFree
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMemoryAlloc
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset4
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadStartup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadNew)
</UL>
<P><STRONG><a name="[44]"></a>svcRtxThreadTerminate</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, .\build\rtx_thread.o(.text.svcRtxThreadTerminate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = svcRtxThreadTerminate &rArr; osRtxMutexOwnerRelease &rArr; osRtxThreadWaitExit &rArr; osRtxThreadDispatch &rArr; osRtxThreadReadyPut &rArr; osRtxThreadListPut
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EvrRtxThreadError
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadJoinWakeup
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadId
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDestroy
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDelayRemove
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelGetState
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxMutexOwnerRelease
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSwitch
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListRemove
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadListGet
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadDispatch
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_thread.o(.text.osThreadTerminate)
</UL>
<P><STRONG><a name="[29e]"></a>TimerInsert</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, .\build\rtx_timer.o(.text.TimerInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TimerInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[29c]"></a>TimerUnlink</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, .\build\rtx_timer.o(.text.TimerUnlink))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[29b]"></a>osRtxThreadGetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_timer.o(.text.osRtxThreadGetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[29d]"></a>osRtxThreadSetRunning</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, .\build\rtx_timer.o(.text.osRtxThreadSetRunning))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxTimerTick
</UL>

<P><STRONG><a name="[3d]"></a>osRtxTimerTick</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, .\build\rtx_timer.o(.text.osRtxTimerTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = osRtxTimerTick &rArr; osMessageQueuePut &rArr; isrRtxMessageQueuePut &rArr; EvrRtxMessageQueueError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osMessageQueuePut
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadSetRunning
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxThreadGetRunning
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerUnlink
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerInsert
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;osRtxKernelErrorNotify
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rtx_timer.o(.text.osRtxTimerSetup)
</UL>
<P><STRONG><a name="[1ed]"></a>_serial_init_direct</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, .\build\serial_api.o(.text._serial_init_direct), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_mode
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pin_function
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed_assert_internal
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_uart
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_uart_index
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_init
</UL>

<P><STRONG><a name="[20a]"></a>debug</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, .\build\serial_api.o(.text.debug), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2vfprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_baud
</UL>

<P><STRONG><a name="[e2]"></a>ADC_DelayMicroSecond</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(.text.ADC_DelayMicroSecond))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_DelayMicroSecond
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_ConfigChannel
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[e4]"></a>ADC_Enable</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_adc.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ADC_Enable &rArr; HAL_GetTick &rArr; core_util_critical_section_exit &rArr; hal_critical_section_exit &rArr; mbed_assert_internal &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DelayMicroSecond
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_ADC_Start
</UL>

<P><STRONG><a name="[fd]"></a>LPTIM_WaitForFlag</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, .\build\stm32l0xx_hal_lptim.o(.text.LPTIM_WaitForFlag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LPTIM_WaitForFlag
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_LPTIM_Counter_Start
</UL>

<P><STRONG><a name="[109]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_tim.o(.text.TIM_Base_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[10b]"></a>TIM_CCxChannelCmd</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, .\build\stm32l0xx_hal_tim.o(.text.TIM_CCxChannelCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM_CCxChannelCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_Start
</UL>

<P><STRONG><a name="[2bb]"></a>LL_TIM_GenerateEvent_CC1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.LL_TIM_GenerateEvent_CC1))
<BR><BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;us_ticker_fire_interrupt
</UL>

<P><STRONG><a name="[21f]"></a>__NVIC_EnableIRQ</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.__NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[21e]"></a>__NVIC_SetVector</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, .\build\us_ticker.o(.text.__NVIC_SetVector))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_16bit_timer
</UL>

<P><STRONG><a name="[7b]"></a>_GLOBAL__sub_I_main.cpp</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, .\build\main.o(.text._GLOBAL__sub_I_main.cpp))
<BR><BR>[Stack]<UL><LI>Max Depth = 848<LI>Call Chain = _GLOBAL__sub_I_main.cpp &rArr; __cxx_global_var_init &rArr; mbed::AnalogIn::AnalogIn(PinName, float) &rArr; analogin_init &rArr; pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.7
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.6
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.5
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.4
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.3
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.2
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init.1
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxx_global_var_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(.init_array)
</UL>
<P><STRONG><a name="[132]"></a>__cxx_global_var_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 840<LI>Call Chain = __cxx_global_var_init &rArr; mbed::AnalogIn::AnalogIn(PinName, float) &rArr; analogin_init &rArr; pinmap_peripheral &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::AnalogIn::AnalogIn(PinName, float)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[133]"></a>__cxx_global_var_init.1</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.1))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = __cxx_global_var_init.1 &rArr; mbed::DigitalIn::DigitalIn__sub_object(PinName) &rArr; gpio_init_in &rArr; gpio_init_in_ex &rArr; _gpio_init_in &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalIn::DigitalIn__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[134]"></a>__cxx_global_var_init.2</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.2))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init.2 &rArr; mbed::Ticker::Ticker() &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[135]"></a>__cxx_global_var_init.3</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.3))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxx_global_var_init.3 &rArr; mbed::Ticker::Ticker() &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Ticker::Ticker()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[136]"></a>__cxx_global_var_init.4</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.4))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxx_global_var_init.4 &rArr; mbed::Timeout::Timeout() &rArr; mbed::TimeoutBase::TimeoutBase__sub_object(ticker_data_t const*, bool) &rArr; mbed::TickerBase::TickerBase__sub_object(ticker_data_t const*, bool)
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::Timeout::Timeout()
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[137]"></a>__cxx_global_var_init.5</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, .\build\main.o(.text.__cxx_global_var_init.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __cxx_global_var_init.5 &rArr; rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*) &rArr; rtos::Semaphore::Semaphore(int) &rArr; rtos::Semaphore::constructor(int, unsigned short) &rArr; osSemaphoreNew &rArr; EvrRtxSemaphoreError &rArr; trap_rtx_error &rArr;  mbed_error (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtos::Thread::Thread__sub_object(osPriority_t, unsigned int, unsigned char*, char const*)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[138]"></a>__cxx_global_var_init.6</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = __cxx_global_var_init.6 &rArr; mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[139]"></a>__cxx_global_var_init.7</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, .\build\main.o(.text.__cxx_global_var_init.7))
<BR><BR>[Stack]<UL><LI>Max Depth = 736<LI>Call Chain = __cxx_global_var_init.7 &rArr; mbed::DigitalOut::DigitalOut__sub_object(PinName) &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mbed::DigitalOut::DigitalOut__sub_object(PinName)
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GLOBAL__sub_I_main.cpp
</UL>

<P><STRONG><a name="[96]"></a>AlignUp</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_alloc_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap1_SizeAdjust
</UL>

<P><STRONG><a name="[95]"></a>Heap1_SizeAdjust</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_alloc_threads.o)(.text))
<BR><BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AlignUp
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc_internal$concurrent
</UL>

<P><STRONG><a name="[aa]"></a>_freopen_locked</STRONG> (Thumb, 174 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(fopen_locked.o)(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 920<LI>Call Chain = _freopen_locked &rArr; _sys_open &rArr; open &rArr; mbed::FilePath::FilePath(char const*) &rArr; mbed::FileBase::lookup(char const*, unsigned int) &rArr; rtos::Mutex::lock() &rArr; mbed_error &rArr; mbed_halt_system &rArr; mbed_die &rArr; gpio_init_out &rArr; gpio_init_out_ex &rArr; _gpio_init_out &rArr; gpio_init &rArr; gpio_set &rArr; pin_function &rArr; Set_GPIO_Clock &rArr; error &rArr;  mbed_halt_system (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_release
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mutex_acquire
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[b7]"></a>_dadd1</STRONG> (Thumb, 290 bytes, Stack size 20 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[b6]"></a>_dsub1</STRONG> (Thumb, 470 bytes, Stack size 40 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\fz_ps.l(daddsub.o)(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[ce]"></a>AlignUpOffset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, C:\Keil_v5\ARM\ARMCLANG\Bin\..\lib\armlib\c_p.l(h1_extend_threads.o)(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<P>
<H3>
Undefined Global Symbols
</H3>
<P><STRONG><a name="[cc]"></a>__rt_lib_shutdown</STRONG> (ARM, 0 bytes, Stack size 0 bytes, UNDEFINED)
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<HR></body></html>
